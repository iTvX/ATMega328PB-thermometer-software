
AVRASM ver. 2.2.7  C:\Users\Clayton\Desktop\yu-csc-330-final-project\temperature_reminder_in_AVR_assembly\FinalWithInterrupt\FinalProjectCode\main.asm Tue Dec 11 23:22:06 2018

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.209\avrasm\inc\m328PBdef.inc'
C:\Users\Clayton\Desktop\yu-csc-330-final-project\temperature_reminder_in_AVR_assembly\FinalWithInterrupt\FinalProjectCode\main.asm(72): Including file 'C:\Users\Clayton\Desktop\yu-csc-330-final-project\temperature_reminder_in_AVR_assembly\FinalWithInterrupt\FinalProjectCode\lib_delay.asm'
C:\Users\Clayton\Desktop\yu-csc-330-final-project\temperature_reminder_in_AVR_assembly\FinalWithInterrupt\FinalProjectCode\main.asm(73): Including file 'C:\Users\Clayton\Desktop\yu-csc-330-final-project\temperature_reminder_in_AVR_assembly\FinalWithInterrupt\FinalProjectCode\lib_SSD1306_OLED.asm'
C:\Users\Clayton\Desktop\yu-csc-330-final-project\temperature_reminder_in_AVR_assembly\FinalWithInterrupt\FinalProjectCode\lib_SSD1306_OLED.asm(21): Including file 'C:\Users\Clayton\Desktop\yu-csc-330-final-project\temperature_reminder_in_AVR_assembly\FinalWithInterrupt\FinalProjectCode\lib_SPI.asm'
C:\Users\Clayton\Desktop\yu-csc-330-final-project\temperature_reminder_in_AVR_assembly\FinalWithInterrupt\FinalProjectCode\main.asm(74): Including file 'C:\Users\Clayton\Desktop\yu-csc-330-final-project\temperature_reminder_in_AVR_assembly\FinalWithInterrupt\FinalProjectCode\lib_GFX.asm'
C:\Users\Clayton\Desktop\yu-csc-330-final-project\temperature_reminder_in_AVR_assembly\FinalWithInterrupt\FinalProjectCode\lib_GFX.asm(19): Including file 'C:\Users\Clayton\Desktop\yu-csc-330-final-project\temperature_reminder_in_AVR_assembly\FinalWithInterrupt\FinalProjectCode\character_map.asm'
C:\Users\Clayton\Desktop\yu-csc-330-final-project\temperature_reminder_in_AVR_assembly\FinalWithInterrupt\FinalProjectCode\main.asm(75): Including file 'C:\Users\Clayton\Desktop\yu-csc-330-final-project\temperature_reminder_in_AVR_assembly\FinalWithInterrupt\FinalProjectCode\char_library.asm'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.209\avrasm\inc\m328PBdef.inc'
C:\Users\Clayton\Desktop\yu-csc-330-final-project\temperature_reminder_in_AVR_assembly\FinalWithInterrupt\FinalProjectCode\main.asm(72): Including file 'C:\Users\Clayton\Desktop\yu-csc-330-final-project\temperature_reminder_in_AVR_assembly\FinalWithInterrupt\FinalProjectCode\lib_delay.asm'
C:\Users\Clayton\Desktop\yu-csc-330-final-project\temperature_reminder_in_AVR_assembly\FinalWithInterrupt\FinalProjectCode\main.asm(73): Including file 'C:\Users\Clayton\Desktop\yu-csc-330-final-project\temperature_reminder_in_AVR_assembly\FinalWithInterrupt\FinalProjectCode\lib_SSD1306_OLED.asm'
C:\Users\Clayton\Desktop\yu-csc-330-final-project\temperature_reminder_in_AVR_assembly\FinalWithInterrupt\FinalProjectCode\lib_SSD1306_OLED.asm(21): Including file 'C:\Users\Clayton\Desktop\yu-csc-330-final-project\temperature_reminder_in_AVR_assembly\FinalWithInterrupt\FinalProjectCode\lib_SPI.asm'
C:\Users\Clayton\Desktop\yu-csc-330-final-project\temperature_reminder_in_AVR_assembly\FinalWithInterrupt\FinalProjectCode\main.asm(74): Including file 'C:\Users\Clayton\Desktop\yu-csc-330-final-project\temperature_reminder_in_AVR_assembly\FinalWithInterrupt\FinalProjectCode\lib_GFX.asm'
C:\Users\Clayton\Desktop\yu-csc-330-final-project\temperature_reminder_in_AVR_assembly\FinalWithInterrupt\FinalProjectCode\lib_GFX.asm(19): Including file 'C:\Users\Clayton\Desktop\yu-csc-330-final-project\temperature_reminder_in_AVR_assembly\FinalWithInterrupt\FinalProjectCode\character_map.asm'
C:\Users\Clayton\Desktop\yu-csc-330-final-project\temperature_reminder_in_AVR_assembly\FinalWithInterrupt\FinalProjectCode\main.asm(75): Including file 'C:\Users\Clayton\Desktop\yu-csc-330-final-project\temperature_reminder_in_AVR_assembly\FinalWithInterrupt\FinalProjectCode\char_library.asm'
                                 
                                 ; Created: 2018/12/7 22:56:43
                                 
                                 
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;*
                                 ;* Number            : AVR000
                                 ;* File Name         : m328PBdef.inc
                                 ;* Title             : Register/Bit Definitions for the ATmega328PB
                                 ;* Created           : 2018-02-19 10:50
                                 ;* Version           : 1.00
                                 ;* Support e-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328PB
                                 ;*
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal
                                 ;* SRAM is also defined
                                 ;*
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PBDEF_INC_
                                 #define _M328PBDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device	ATmega328PB
                                 #pragma AVRPART ADMIN PART_NAME ATmega328PB
                                 .equ	SIGNATURE_000	= 0x1E
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x16
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED" are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	TWAMR1	= 0xDD ; MEMORY MAPPED
                                 .equ	TWCR1	= 0xDC ; MEMORY MAPPED
                                 .equ	TWDR1	= 0xDB ; MEMORY MAPPED
                                 .equ	TWAR1	= 0xDA ; MEMORY MAPPED
                                 .equ	TWSR1	= 0xD9 ; MEMORY MAPPED
                                 .equ	TWBR1	= 0xD8 ; MEMORY MAPPED
                                 .equ	UDR1	= 0xCE ; MEMORY MAPPED
                                 .equ	UBRR1H	= 0xCD ; MEMORY MAPPED
                                 .equ	UBRR1L	= 0xCC ; MEMORY MAPPED
                                 .equ	UCSR1D	= 0xCB ; MEMORY MAPPED
                                 .equ	UCSR1C	= 0xCA ; MEMORY MAPPED
                                 .equ	UCSR1B	= 0xC9 ; MEMORY MAPPED
                                 .equ	UCSR1A	= 0xC8 ; MEMORY MAPPED
                                 .equ	UDR0	= 0xC6 ; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xC5 ; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xC4 ; MEMORY MAPPED
                                 .equ	UCSR0D	= 0xC3 ; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xC2 ; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xC1 ; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xC0 ; MEMORY MAPPED
                                 .equ	TWAMR0	= 0xBD ; MEMORY MAPPED
                                 .equ	TWCR0	= 0xBC ; MEMORY MAPPED
                                 .equ	TWDR0	= 0xBB ; MEMORY MAPPED
                                 .equ	TWAR0	= 0xBA ; MEMORY MAPPED
                                 .equ	TWSR0	= 0xB9 ; MEMORY MAPPED
                                 .equ	TWBR0	= 0xB8 ; MEMORY MAPPED
                                 .equ	ASSR	= 0xB6 ; MEMORY MAPPED
                                 .equ	OCR2B	= 0xB4 ; MEMORY MAPPED
                                 .equ	OCR2A	= 0xB3 ; MEMORY MAPPED
                                 .equ	TCNT2	= 0xB2 ; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xB1 ; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xB0 ; MEMORY MAPPED
                                 .equ	SPDR1	= 0xAE ; MEMORY MAPPED
                                 .equ	SPSR1	= 0xAD ; MEMORY MAPPED
                                 .equ	SPCR1	= 0xAC ; MEMORY MAPPED
                                 .equ	OCR4BH	= 0xAB ; MEMORY MAPPED
                                 .equ	OCR4BL	= 0xAA ; MEMORY MAPPED
                                 .equ	OCR4AH	= 0xA9 ; MEMORY MAPPED
                                 .equ	OCR4AL	= 0xA8 ; MEMORY MAPPED
                                 .equ	ICR4H	= 0xA7 ; MEMORY MAPPED
                                 .equ	ICR4L	= 0xA6 ; MEMORY MAPPED
                                 .equ	TCNT4H	= 0xA5 ; MEMORY MAPPED
                                 .equ	TCNT4L	= 0xA4 ; MEMORY MAPPED
                                 .equ	TCCR4C	= 0xA2 ; MEMORY MAPPED
                                 .equ	TCCR4B	= 0xA1 ; MEMORY MAPPED
                                 .equ	TCCR4A	= 0xA0 ; MEMORY MAPPED
                                 .equ	OCR3BH	= 0x9B ; MEMORY MAPPED
                                 .equ	OCR3BL	= 0x9A ; MEMORY MAPPED
                                 .equ	OCR3AH	= 0x99 ; MEMORY MAPPED
                                 .equ	OCR3AL	= 0x98 ; MEMORY MAPPED
                                 .equ	ICR3H	= 0x97 ; MEMORY MAPPED
                                 .equ	ICR3L	= 0x96 ; MEMORY MAPPED
                                 .equ	TCNT3H	= 0x95 ; MEMORY MAPPED
                                 .equ	TCNT3L	= 0x94 ; MEMORY MAPPED
                                 .equ	TCCR3C	= 0x92 ; MEMORY MAPPED
                                 .equ	TCCR3B	= 0x91 ; MEMORY MAPPED
                                 .equ	TCCR3A	= 0x90 ; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8B ; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8A ; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89 ; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88 ; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87 ; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86 ; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85 ; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84 ; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82 ; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81 ; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80 ; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7F ; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7E ; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7C ; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7B ; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7A ; MEMORY MAPPED
                                 .equ	ADCH	= 0x79 ; MEMORY MAPPED
                                 .equ	ADCL	= 0x78 ; MEMORY MAPPED
                                 .equ	PCMSK3	= 0x73 ; MEMORY MAPPED
                                 .equ	TIMSK4	= 0x72 ; MEMORY MAPPED
                                 .equ	TIMSK3	= 0x71 ; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70 ; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6F ; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6E ; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6D ; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6C ; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6B ; MEMORY MAPPED
                                 .equ	EICRA	= 0x69 ; MEMORY MAPPED
                                 .equ	PCICR	= 0x68 ; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66 ; MEMORY MAPPED
                                 .equ	PRR1	= 0x65 ; MEMORY MAPPED
                                 .equ	PRR0	= 0x64 ; MEMORY MAPPED
                                 .equ	XFDCSR	= 0x62 ; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61 ; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60 ; MEMORY MAPPED
                                 .equ	SREG	= 0x3F ; 
                                 .equ	SPH	= 0x3E ; 
                                 .equ	SPL	= 0x3D ; 
                                 .equ	SPMCSR	= 0x37 ; 
                                 .equ	MCUCR	= 0x35 ; 
                                 .equ	MCUSR	= 0x34 ; 
                                 .equ	SMCR	= 0x33 ; 
                                 .equ	ACSRA	= 0x30 ; 
                                 .equ	ACSR	= 0x30 ; 
                                 .equ	ACSRB	= 0x2F ; 
                                 .equ	SPDR0	= 0x2E ; 
                                 .equ	SPSR0	= 0x2D ; 
                                 .equ	SPCR0	= 0x2C ; 
                                 .equ	GPIOR2	= 0x2B ; 
                                 .equ	GPIOR1	= 0x2A ; 
                                 .equ	OCR0B	= 0x28 ; 
                                 .equ	OCR0A	= 0x27 ; 
                                 .equ	TCNT0	= 0x26 ; 
                                 .equ	TCCR0B	= 0x25 ; 
                                 .equ	TCCR0A	= 0x24 ; 
                                 .equ	GTCCR	= 0x23 ; 
                                 .equ	EEARH	= 0x22 ; 
                                 .equ	EEARL	= 0x21 ; 
                                 .equ	EEDR	= 0x20 ; 
                                 .equ	EECR	= 0x1F ; 
                                 .equ	GPIOR0	= 0x1E ; 
                                 .equ	EIMSK	= 0x1D ; 
                                 .equ	EIFR	= 0x1C ; 
                                 .equ	PCIFR	= 0x1B ; 
                                 .equ	TIFR4	= 0x19 ; 
                                 .equ	TIFR3	= 0x18 ; 
                                 .equ	TIFR2	= 0x17 ; 
                                 .equ	TIFR1	= 0x16 ; 
                                 .equ	TIFR0	= 0x15 ; 
                                 .equ	PORTE	= 0x0E ; 
                                 .equ	DDRE	= 0x0D ; 
                                 .equ	PINE	= 0x0C ; 
                                 .equ	PORTD	= 0x0B ; 
                                 .equ	DDRD	= 0x0A ; 
                                 .equ	PIND	= 0x09 ; 
                                 .equ	PORTC	= 0x08 ; 
                                 .equ	DDRC	= 0x07 ; 
                                 .equ	PINC	= 0x06 ; 
                                 .equ	PORTB	= 0x05 ; 
                                 .equ	DDRB	= 0x04 ; 
                                 .equ	PINB	= 0x03 ; 
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 *****************
                                 ; UDR0 - USART I/O Data Register 0
                                 .equ	UDR00	= 0 ; USART I/O Data Register 0 Bit 0
                                 .equ	UDR01	= 1 ; USART I/O Data Register 0 Bit 1
                                 .equ	UDR02	= 2 ; USART I/O Data Register 0 Bit 2
                                 .equ	UDR03	= 3 ; USART I/O Data Register 0 Bit 3
                                 .equ	UDR04	= 4 ; USART I/O Data Register 0 Bit 4
                                 .equ	UDR05	= 5 ; USART I/O Data Register 0 Bit 5
                                 .equ	UDR06	= 6 ; USART I/O Data Register 0 Bit 6
                                 .equ	UDR07	= 7 ; USART I/O Data Register 0 Bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0 ; Multi-processor Communication Mode
                                 .equ	U2X0	= 1 ; Double the USART transmission speed
                                 .equ	UPE0	= 2 ; Parity Error
                                 .equ	DOR0	= 3 ; Data overRun
                                 .equ	FE0	= 4 ; Framing Error
                                 .equ	UDRE0	= 5 ; USART Data Register Empty
                                 .equ	TXC0	= 6 ; USART Transmitt Complete
                                 .equ	RXC0	= 7 ; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0 ; Transmit Data Bit 8
                                 .equ	RXB80	= 1 ; Receive Data Bit 8
                                 .equ	UCSZ02	= 2 ; Character Size
                                 .equ	TXEN0	= 3 ; Transmitter Enable
                                 .equ	RXEN0	= 4 ; Receiver Enable
                                 .equ	UDRIE0	= 5 ; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6 ; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7 ; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0 ; Clock Polarity
                                 .equ	UCSZ00	= 1 ; Character Size
                                 .equ	UCSZ01	= 2 ; Character Size
                                 .equ	USBS0	= 3 ; Stop Bit Select
                                 .equ	UPM00	= 4 ; Parity Mode Bits
                                 .equ	UPM01	= 5 ; Parity Mode Bits
                                 .equ	UMSEL00	= 6 ; USART Mode Select
                                 .equ	UMSEL01	= 7 ; USART Mode Select
                                 
                                 ; UCSR0D - USART Control and Status Register D
                                 .equ	SFDE	= 5 ; Start frame detection enable
                                 .equ	RXS	= 6 ; USART RX Start
                                 .equ	RXSIE	= 7 ; USART RX Start Interrupt Enable
                                 
                                 ; UBRR0 - USART Baud Rate Register Bytes
                                 .equ	UBRR0H0	= 0 ; USART Baud Rate Register Bytes High Bit 8
                                 .equ	UBRR0H1	= 1 ; USART Baud Rate Register Bytes High Bit 9
                                 .equ	UBRR0H2	= 2 ; USART Baud Rate Register Bytes High Bit 10
                                 .equ	UBRR0H3	= 3 ; USART Baud Rate Register Bytes High Bit 11
                                 
                                 .equ	UBRR0L0	= 0 ; USART Baud Rate Register Bytes Low Bit 0
                                 .equ	UBRR0L1	= 1 ; USART Baud Rate Register Bytes Low Bit 1
                                 .equ	UBRR0L2	= 2 ; USART Baud Rate Register Bytes Low Bit 2
                                 .equ	UBRR0L3	= 3 ; USART Baud Rate Register Bytes Low Bit 3
                                 .equ	UBRR0L4	= 4 ; USART Baud Rate Register Bytes Low Bit 4
                                 .equ	UBRR0L5	= 5 ; USART Baud Rate Register Bytes Low Bit 5
                                 .equ	UBRR0L6	= 6 ; USART Baud Rate Register Bytes Low Bit 6
                                 .equ	UBRR0L7	= 7 ; USART Baud Rate Register Bytes Low Bit 7
                                 
                                 
                                 ; ***** USART1 *****************
                                 ; UDR1 - USART I/O Data Register
                                 .equ	UDR10	= 0 ; USART I/O Data Register Bit 0
                                 .equ	UDR11	= 1 ; USART I/O Data Register Bit 1
                                 .equ	UDR12	= 2 ; USART I/O Data Register Bit 2
                                 .equ	UDR13	= 3 ; USART I/O Data Register Bit 3
                                 .equ	UDR14	= 4 ; USART I/O Data Register Bit 4
                                 .equ	UDR15	= 5 ; USART I/O Data Register Bit 5
                                 .equ	UDR16	= 6 ; USART I/O Data Register Bit 6
                                 .equ	UDR17	= 7 ; USART I/O Data Register Bit 7
                                 
                                 ; UCSR1A - USART Control and Status Register A
                                 .equ	MPCM1	= 0 ; Multi-processor Communication Mode
                                 .equ	U2X1	= 1 ; Double the USART transmission speed
                                 .equ	UPE1	= 2 ; Parity Error
                                 .equ	DOR1	= 3 ; Data overRun
                                 .equ	FE1	= 4 ; Framing Error
                                 .equ	UDRE1	= 5 ; USART Data Register Empty
                                 .equ	TXC1	= 6 ; USART Transmitt Complete
                                 .equ	RXC1	= 7 ; USART Receive Complete
                                 
                                 ; UCSR1B - USART Control and Status Register B
                                 .equ	TXB81	= 0 ; Transmit Data Bit 8
                                 .equ	RXB81	= 1 ; Receive Data Bit 8
                                 .equ	UCSZ12	= 2 ; Character Size
                                 .equ	TXEN1	= 3 ; Transmitter Enable
                                 .equ	RXEN1	= 4 ; Receiver Enable
                                 .equ	UDRIE1	= 5 ; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE1	= 6 ; TX Complete Interrupt Enable
                                 .equ	RXCIE1	= 7 ; RX Complete Interrupt Enable
                                 
                                 ; UCSR1C - USART Control and Status Register C
                                 .equ	UCPOL1	= 0 ; Clock Polarity
                                 .equ	UCSZ10	= 1 ; Character Size
                                 .equ	UCSZ11	= 2 ; Character Size
                                 .equ	USBS1	= 3 ; Stop Bit Select
                                 .equ	UPM10	= 4 ; Parity Mode Bits
                                 .equ	UPM11	= 5 ; Parity Mode Bits
                                 .equ	UMSEL10	= 6 ; USART Mode Select
                                 .equ	UMSEL11	= 7 ; USART Mode Select
                                 
                                 ; UCSR1D - USART Control and Status Register D
                                 .equ	SFDE1	= 5 ; Start frame detection enable
                                 .equ	RXS1	= 6 ; USART RX Start
                                 .equ	RXSIE1	= 7 ; USART RX Start Interrupt Enable
                                 
                                 ; UBRR1 - USART Baud Rate Register Bytes
                                 .equ	UBRR1H0	= 0 ; USART Baud Rate Register Bytes High Bit 8
                                 .equ	UBRR1H1	= 1 ; USART Baud Rate Register Bytes High Bit 9
                                 .equ	UBRR1H2	= 2 ; USART Baud Rate Register Bytes High Bit 10
                                 .equ	UBRR1H3	= 3 ; USART Baud Rate Register Bytes High Bit 11
                                 
                                 .equ	UBRR1L0	= 0 ; USART Baud Rate Register Bytes Low Bit 0
                                 .equ	UBRR1L1	= 1 ; USART Baud Rate Register Bytes Low Bit 1
                                 .equ	UBRR1L2	= 2 ; USART Baud Rate Register Bytes Low Bit 2
                                 .equ	UBRR1L3	= 3 ; USART Baud Rate Register Bytes Low Bit 3
                                 .equ	UBRR1L4	= 4 ; USART Baud Rate Register Bytes Low Bit 4
                                 .equ	UBRR1L5	= 5 ; USART Baud Rate Register Bytes Low Bit 5
                                 .equ	UBRR1L6	= 6 ; USART Baud Rate Register Bytes Low Bit 6
                                 .equ	UBRR1L7	= 7 ; USART Baud Rate Register Bytes Low Bit 7
                                 
                                 
                                 ; ***** TWI0 *****************
                                 ; TWAMR0 - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1 ; 
                                 .equ	TWAM1	= 2 ; 
                                 .equ	TWAM2	= 3 ; 
                                 .equ	TWAM3	= 4 ; 
                                 .equ	TWAM4	= 5 ; 
                                 .equ	TWAM5	= 6 ; 
                                 .equ	TWAM6	= 7 ; 
                                 
                                 ; TWBR0 - TWI Bit Rate register
                                 .equ	TWBR00	= 0 ; TWI Bit Rate register Bit 0
                                 .equ	TWBR01	= 1 ; TWI Bit Rate register Bit 1
                                 .equ	TWBR02	= 2 ; TWI Bit Rate register Bit 2
                                 .equ	TWBR03	= 3 ; TWI Bit Rate register Bit 3
                                 .equ	TWBR04	= 4 ; TWI Bit Rate register Bit 4
                                 .equ	TWBR05	= 5 ; TWI Bit Rate register Bit 5
                                 .equ	TWBR06	= 6 ; TWI Bit Rate register Bit 6
                                 .equ	TWBR07	= 7 ; TWI Bit Rate register Bit 7
                                 
                                 ; TWCR0 - TWI Control Register
                                 .equ	TWIE	= 0 ; TWI Interrupt Enable
                                 .equ	TWEN	= 2 ; TWI Enable Bit
                                 .equ	TWWC	= 3 ; TWI Write Collition Flag
                                 .equ	TWSTO	= 4 ; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5 ; TWI Start Condition Bit
                                 .equ	TWEA	= 6 ; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7 ; TWI Interrupt Flag
                                 
                                 ; TWSR0 - TWI Status Register
                                 .equ	TWPS0	= 0 ; TWI Prescaler
                                 .equ	TWPS1	= 1 ; TWI Prescaler
                                 .equ	TWS3	= 3 ; TWI Status
                                 .equ	TWS4	= 4 ; TWI Status
                                 .equ	TWS5	= 5 ; TWI Status
                                 .equ	TWS6	= 6 ; TWI Status
                                 .equ	TWS7	= 7 ; TWI Status
                                 
                                 ; TWDR0 - TWI Data register
                                 .equ	TWDR00	= 0 ; TWI Data register Bit 0
                                 .equ	TWDR01	= 1 ; TWI Data register Bit 1
                                 .equ	TWDR02	= 2 ; TWI Data register Bit 2
                                 .equ	TWDR03	= 3 ; TWI Data register Bit 3
                                 .equ	TWDR04	= 4 ; TWI Data register Bit 4
                                 .equ	TWDR05	= 5 ; TWI Data register Bit 5
                                 .equ	TWDR06	= 6 ; TWI Data register Bit 6
                                 .equ	TWDR07	= 7 ; TWI Data register Bit 7
                                 
                                 ; TWAR0 - TWI (Slave) Address register
                                 .equ	TWGCE	= 0 ; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1 ; TWI (Slave) Address register Bits
                                 .equ	TWA1	= 2 ; TWI (Slave) Address register Bits
                                 .equ	TWA2	= 3 ; TWI (Slave) Address register Bits
                                 .equ	TWA3	= 4 ; TWI (Slave) Address register Bits
                                 .equ	TWA4	= 5 ; TWI (Slave) Address register Bits
                                 .equ	TWA5	= 6 ; TWI (Slave) Address register Bits
                                 .equ	TWA6	= 7 ; TWI (Slave) Address register Bits
                                 
                                 
                                 ; ***** TWI1 *****************
                                 ; TWAMR1 - TWI (Slave) Address Mask Register
                                 .equ	TWAM10	= 1 ; 
                                 .equ	TWAM11	= 2 ; 
                                 .equ	TWAM12	= 3 ; 
                                 .equ	TWAM13	= 4 ; 
                                 .equ	TWAM14	= 5 ; 
                                 .equ	TWAM15	= 6 ; 
                                 .equ	TWAM16	= 7 ; 
                                 
                                 ; TWBR1 - TWI Bit Rate register
                                 .equ	TWBR10	= 0 ; TWI Bit Rate register Bit 0
                                 .equ	TWBR11	= 1 ; TWI Bit Rate register Bit 1
                                 .equ	TWBR12	= 2 ; TWI Bit Rate register Bit 2
                                 .equ	TWBR13	= 3 ; TWI Bit Rate register Bit 3
                                 .equ	TWBR14	= 4 ; TWI Bit Rate register Bit 4
                                 .equ	TWBR15	= 5 ; TWI Bit Rate register Bit 5
                                 .equ	TWBR16	= 6 ; TWI Bit Rate register Bit 6
                                 .equ	TWBR17	= 7 ; TWI Bit Rate register Bit 7
                                 
                                 ; TWCR1 - TWI Control Register
                                 .equ	TWIE1	= 0 ; TWI Interrupt Enable
                                 .equ	TWEN1	= 2 ; TWI Enable Bit
                                 .equ	TWWC1	= 3 ; TWI Write Collition Flag
                                 .equ	TWSTO1	= 4 ; TWI Stop Condition Bit
                                 .equ	TWSTA1	= 5 ; TWI Start Condition Bit
                                 .equ	TWEA1	= 6 ; TWI Enable Acknowledge Bit
                                 .equ	TWINT1	= 7 ; TWI Interrupt Flag
                                 
                                 ; TWSR1 - TWI Status Register
                                 .equ	TWPS10	= 0 ; TWI Prescaler
                                 .equ	TWPS11	= 1 ; TWI Prescaler
                                 .equ	TWS13	= 3 ; TWI Status
                                 .equ	TWS14	= 4 ; TWI Status
                                 .equ	TWS15	= 5 ; TWI Status
                                 .equ	TWS16	= 6 ; TWI Status
                                 .equ	TWS17	= 7 ; TWI Status
                                 
                                 ; TWDR1 - TWI Data register
                                 .equ	TWDR10	= 0 ; TWI Data register Bit 0
                                 .equ	TWDR11	= 1 ; TWI Data register Bit 1
                                 .equ	TWDR12	= 2 ; TWI Data register Bit 2
                                 .equ	TWDR13	= 3 ; TWI Data register Bit 3
                                 .equ	TWDR14	= 4 ; TWI Data register Bit 4
                                 .equ	TWDR15	= 5 ; TWI Data register Bit 5
                                 .equ	TWDR16	= 6 ; TWI Data register Bit 6
                                 .equ	TWDR17	= 7 ; TWI Data register Bit 7
                                 
                                 ; TWAR1 - TWI (Slave) Address register
                                 .equ	TWAR10	= 0 ; TWI (Slave) Address register Bit 0
                                 .equ	TWAR11	= 1 ; TWI (Slave) Address register Bit 1
                                 .equ	TWAR12	= 2 ; TWI (Slave) Address register Bit 2
                                 .equ	TWAR13	= 3 ; TWI (Slave) Address register Bit 3
                                 .equ	TWAR14	= 4 ; TWI (Slave) Address register Bit 4
                                 .equ	TWAR15	= 5 ; TWI (Slave) Address register Bit 5
                                 .equ	TWAR16	= 6 ; TWI (Slave) Address register Bit 6
                                 .equ	TWAR17	= 7 ; TWI (Slave) Address register Bit 7
                                 
                                 
                                 ; ***** TC1 *****************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0 ; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1 ; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2 ; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5 ; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0 ; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1 ; Output Compare Flag 1A
                                 .equ	OCF1B	= 2 ; Output Compare Flag 1B
                                 .equ	ICF1	= 5 ; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0 ; Waveform Generation Mode
                                 .equ	WGM11	= 1 ; Waveform Generation Mode
                                 .equ	COM1B0	= 4 ; Compare Output Mode 1B, bits
                                 .equ	COM1B1	= 5 ; Compare Output Mode 1B, bits
                                 .equ	COM1A0	= 6 ; Compare Output Mode 1A, bits
                                 .equ	COM1A1	= 7 ; Compare Output Mode 1A, bits
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0 ; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1 ; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2 ; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3 ; Waveform Generation Mode
                                 .equ	WGM13	= 4 ; Waveform Generation Mode
                                 .equ	ICES1	= 6 ; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7 ; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6 ; 
                                 .equ	FOC1A	= 7 ; 
                                 
                                 ; TCNT1 - Timer/Counter1 Bytes
                                 .equ	TCNT1H0	= 0 ; Timer/Counter1 Bytes High Bit 8
                                 .equ	TCNT1H1	= 1 ; Timer/Counter1 Bytes High Bit 9
                                 .equ	TCNT1H2	= 2 ; Timer/Counter1 Bytes High Bit 10
                                 .equ	TCNT1H3	= 3 ; Timer/Counter1 Bytes High Bit 11
                                 .equ	TCNT1H4	= 4 ; Timer/Counter1 Bytes High Bit 12
                                 .equ	TCNT1H5	= 5 ; Timer/Counter1 Bytes High Bit 13
                                 .equ	TCNT1H6	= 6 ; Timer/Counter1 Bytes High Bit 14
                                 .equ	TCNT1H7	= 7 ; Timer/Counter1 Bytes High Bit 15
                                 
                                 .equ	TCNT1L0	= 0 ; Timer/Counter1 Bytes Low Bit 0
                                 .equ	TCNT1L1	= 1 ; Timer/Counter1 Bytes Low Bit 1
                                 .equ	TCNT1L2	= 2 ; Timer/Counter1 Bytes Low Bit 2
                                 .equ	TCNT1L3	= 3 ; Timer/Counter1 Bytes Low Bit 3
                                 .equ	TCNT1L4	= 4 ; Timer/Counter1 Bytes Low Bit 4
                                 .equ	TCNT1L5	= 5 ; Timer/Counter1 Bytes Low Bit 5
                                 .equ	TCNT1L6	= 6 ; Timer/Counter1 Bytes Low Bit 6
                                 .equ	TCNT1L7	= 7 ; Timer/Counter1 Bytes Low Bit 7
                                 
                                 ; OCR1A - Timer/Counter1 Output Compare Register Bytes
                                 .equ	OCR1AH0	= 0 ; Timer/Counter1 Output Compare Register Bytes High Bit 8
                                 .equ	OCR1AH1	= 1 ; Timer/Counter1 Output Compare Register Bytes High Bit 9
                                 .equ	OCR1AH2	= 2 ; Timer/Counter1 Output Compare Register Bytes High Bit 10
                                 .equ	OCR1AH3	= 3 ; Timer/Counter1 Output Compare Register Bytes High Bit 11
                                 .equ	OCR1AH4	= 4 ; Timer/Counter1 Output Compare Register Bytes High Bit 12
                                 .equ	OCR1AH5	= 5 ; Timer/Counter1 Output Compare Register Bytes High Bit 13
                                 .equ	OCR1AH6	= 6 ; Timer/Counter1 Output Compare Register Bytes High Bit 14
                                 .equ	OCR1AH7	= 7 ; Timer/Counter1 Output Compare Register Bytes High Bit 15
                                 
                                 .equ	OCR1AL0	= 0 ; Timer/Counter1 Output Compare Register Bytes Low Bit 0
                                 .equ	OCR1AL1	= 1 ; Timer/Counter1 Output Compare Register Bytes Low Bit 1
                                 .equ	OCR1AL2	= 2 ; Timer/Counter1 Output Compare Register Bytes Low Bit 2
                                 .equ	OCR1AL3	= 3 ; Timer/Counter1 Output Compare Register Bytes Low Bit 3
                                 .equ	OCR1AL4	= 4 ; Timer/Counter1 Output Compare Register Bytes Low Bit 4
                                 .equ	OCR1AL5	= 5 ; Timer/Counter1 Output Compare Register Bytes Low Bit 5
                                 .equ	OCR1AL6	= 6 ; Timer/Counter1 Output Compare Register Bytes Low Bit 6
                                 .equ	OCR1AL7	= 7 ; Timer/Counter1 Output Compare Register Bytes Low Bit 7
                                 
                                 ; OCR1B - Timer/Counter1 Output Compare Register Bytes
                                 .equ	OCR1BH0	= 0 ; Timer/Counter1 Output Compare Register Bytes High Bit 8
                                 .equ	OCR1BH1	= 1 ; Timer/Counter1 Output Compare Register Bytes High Bit 9
                                 .equ	OCR1BH2	= 2 ; Timer/Counter1 Output Compare Register Bytes High Bit 10
                                 .equ	OCR1BH3	= 3 ; Timer/Counter1 Output Compare Register Bytes High Bit 11
                                 .equ	OCR1BH4	= 4 ; Timer/Counter1 Output Compare Register Bytes High Bit 12
                                 .equ	OCR1BH5	= 5 ; Timer/Counter1 Output Compare Register Bytes High Bit 13
                                 .equ	OCR1BH6	= 6 ; Timer/Counter1 Output Compare Register Bytes High Bit 14
                                 .equ	OCR1BH7	= 7 ; Timer/Counter1 Output Compare Register Bytes High Bit 15
                                 
                                 .equ	OCR1BL0	= 0 ; Timer/Counter1 Output Compare Register Bytes Low Bit 0
                                 .equ	OCR1BL1	= 1 ; Timer/Counter1 Output Compare Register Bytes Low Bit 1
                                 .equ	OCR1BL2	= 2 ; Timer/Counter1 Output Compare Register Bytes Low Bit 2
                                 .equ	OCR1BL3	= 3 ; Timer/Counter1 Output Compare Register Bytes Low Bit 3
                                 .equ	OCR1BL4	= 4 ; Timer/Counter1 Output Compare Register Bytes Low Bit 4
                                 .equ	OCR1BL5	= 5 ; Timer/Counter1 Output Compare Register Bytes Low Bit 5
                                 .equ	OCR1BL6	= 6 ; Timer/Counter1 Output Compare Register Bytes Low Bit 6
                                 .equ	OCR1BL7	= 7 ; Timer/Counter1 Output Compare Register Bytes Low Bit 7
                                 
                                 ; ICR1 - Timer/Counter1 Input Capture Register Bytes
                                 .equ	ICR1H0	= 0 ; Timer/Counter1 Input Capture Register Bytes High Bit 8
                                 .equ	ICR1H1	= 1 ; Timer/Counter1 Input Capture Register Bytes High Bit 9
                                 .equ	ICR1H2	= 2 ; Timer/Counter1 Input Capture Register Bytes High Bit 10
                                 .equ	ICR1H3	= 3 ; Timer/Counter1 Input Capture Register Bytes High Bit 11
                                 .equ	ICR1H4	= 4 ; Timer/Counter1 Input Capture Register Bytes High Bit 12
                                 .equ	ICR1H5	= 5 ; Timer/Counter1 Input Capture Register Bytes High Bit 13
                                 .equ	ICR1H6	= 6 ; Timer/Counter1 Input Capture Register Bytes High Bit 14
                                 .equ	ICR1H7	= 7 ; Timer/Counter1 Input Capture Register Bytes High Bit 15
                                 
                                 .equ	ICR1L0	= 0 ; Timer/Counter1 Input Capture Register Bytes Low Bit 0
                                 .equ	ICR1L1	= 1 ; Timer/Counter1 Input Capture Register Bytes Low Bit 1
                                 .equ	ICR1L2	= 2 ; Timer/Counter1 Input Capture Register Bytes Low Bit 2
                                 .equ	ICR1L3	= 3 ; Timer/Counter1 Input Capture Register Bytes Low Bit 3
                                 .equ	ICR1L4	= 4 ; Timer/Counter1 Input Capture Register Bytes Low Bit 4
                                 .equ	ICR1L5	= 5 ; Timer/Counter1 Input Capture Register Bytes Low Bit 5
                                 .equ	ICR1L6	= 6 ; Timer/Counter1 Input Capture Register Bytes Low Bit 6
                                 .equ	ICR1L7	= 7 ; Timer/Counter1 Input Capture Register Bytes Low Bit 7
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0 ; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7 ; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TC3 *****************
                                 ; TIMSK3 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE3	= 0 ; Timer/Counter3 Overflow Interrupt Enable
                                 .equ	OCIE3A	= 1 ; Timer/Counter3 Output Compare Match A Interrupt Enable
                                 .equ	OCIE3B	= 2 ; Timer/Counter3 Output Compare Match B Interrupt Enable
                                 .equ	ICIE3	= 5 ; Timer/Counter3 Input Capture Interrupt Enable
                                 
                                 ; TIFR3 - Timer/Counter3 Interrupt Flag register
                                 .equ	TOV3	= 0 ; Timer/Counter3 Overflow Flag
                                 .equ	OCF3A	= 1 ; Output Compare Flag 3A
                                 .equ	OCF3B	= 2 ; Output Compare Flag 3B
                                 
                                 ; TCCR3A - Timer/Counter3 Control Register A
                                 .equ	WGM30	= 0 ; Waveform Genration Mode
                                 .equ	WGM31	= 1 ; Waveform Genration Mode
                                 .equ	COM3B0	= 4 ; Compare Output Mode bits
                                 .equ	COM3B1	= 5 ; Compare Output Mode bits
                                 .equ	COM3A0	= 6 ; Compare Output Mode bits
                                 .equ	COM3A1	= 7 ; Compare Output Mode bits
                                 
                                 ; TCCR3B - Timer/Counter3 Control Register B
                                 .equ	CS30	= 0 ; Clock Select bits
                                 .equ	CS31	= 1 ; Clock Select bits
                                 .equ	CS32	= 2 ; Clock Select bits
                                 .equ	WGM32	= 3 ; Waveform Generation Mode bit 2
                                 .equ	WGM33	= 4 ; Waveform Generation Mode bit 3
                                 .equ	ICES3	= 6 ; Input Capture Edge Select
                                 .equ	ICNC3	= 7 ; Input Capture Noise Canceler
                                 
                                 ; TCCR3C - Timer/Counter3 Control Register C
                                 .equ	FOC3B	= 6 ; Force Output Compare for Channel B
                                 .equ	FOC3A	= 7 ; Force Output Compare for Channel A
                                 
                                 ; TCNT3 - Timer/Counter3 Bytes
                                 .equ	TCNT3H0	= 0 ; Timer/Counter3 Bytes High Bit 8
                                 .equ	TCNT3H1	= 1 ; Timer/Counter3 Bytes High Bit 9
                                 .equ	TCNT3H2	= 2 ; Timer/Counter3 Bytes High Bit 10
                                 .equ	TCNT3H3	= 3 ; Timer/Counter3 Bytes High Bit 11
                                 .equ	TCNT3H4	= 4 ; Timer/Counter3 Bytes High Bit 12
                                 .equ	TCNT3H5	= 5 ; Timer/Counter3 Bytes High Bit 13
                                 .equ	TCNT3H6	= 6 ; Timer/Counter3 Bytes High Bit 14
                                 .equ	TCNT3H7	= 7 ; Timer/Counter3 Bytes High Bit 15
                                 
                                 .equ	TCNT3L0	= 0 ; Timer/Counter3 Bytes Low Bit 0
                                 .equ	TCNT3L1	= 1 ; Timer/Counter3 Bytes Low Bit 1
                                 .equ	TCNT3L2	= 2 ; Timer/Counter3 Bytes Low Bit 2
                                 .equ	TCNT3L3	= 3 ; Timer/Counter3 Bytes Low Bit 3
                                 .equ	TCNT3L4	= 4 ; Timer/Counter3 Bytes Low Bit 4
                                 .equ	TCNT3L5	= 5 ; Timer/Counter3 Bytes Low Bit 5
                                 .equ	TCNT3L6	= 6 ; Timer/Counter3 Bytes Low Bit 6
                                 .equ	TCNT3L7	= 7 ; Timer/Counter3 Bytes Low Bit 7
                                 
                                 ; OCR3A - Timer/Counter3 Output Compare Register Bytes
                                 .equ	OCR3AH0	= 0 ; Timer/Counter3 Output Compare Register Bytes High Bit 8
                                 .equ	OCR3AH1	= 1 ; Timer/Counter3 Output Compare Register Bytes High Bit 9
                                 .equ	OCR3AH2	= 2 ; Timer/Counter3 Output Compare Register Bytes High Bit 10
                                 .equ	OCR3AH3	= 3 ; Timer/Counter3 Output Compare Register Bytes High Bit 11
                                 .equ	OCR3AH4	= 4 ; Timer/Counter3 Output Compare Register Bytes High Bit 12
                                 .equ	OCR3AH5	= 5 ; Timer/Counter3 Output Compare Register Bytes High Bit 13
                                 .equ	OCR3AH6	= 6 ; Timer/Counter3 Output Compare Register Bytes High Bit 14
                                 .equ	OCR3AH7	= 7 ; Timer/Counter3 Output Compare Register Bytes High Bit 15
                                 
                                 .equ	OCR3AL0	= 0 ; Timer/Counter3 Output Compare Register Bytes Low Bit 0
                                 .equ	OCR3AL1	= 1 ; Timer/Counter3 Output Compare Register Bytes Low Bit 1
                                 .equ	OCR3AL2	= 2 ; Timer/Counter3 Output Compare Register Bytes Low Bit 2
                                 .equ	OCR3AL3	= 3 ; Timer/Counter3 Output Compare Register Bytes Low Bit 3
                                 .equ	OCR3AL4	= 4 ; Timer/Counter3 Output Compare Register Bytes Low Bit 4
                                 .equ	OCR3AL5	= 5 ; Timer/Counter3 Output Compare Register Bytes Low Bit 5
                                 .equ	OCR3AL6	= 6 ; Timer/Counter3 Output Compare Register Bytes Low Bit 6
                                 .equ	OCR3AL7	= 7 ; Timer/Counter3 Output Compare Register Bytes Low Bit 7
                                 
                                 ; OCR3B - Timer/Counter3 Output Compare Register Bytes
                                 .equ	OCR3BH0	= 0 ; Timer/Counter3 Output Compare Register Bytes High Bit 8
                                 .equ	OCR3BH1	= 1 ; Timer/Counter3 Output Compare Register Bytes High Bit 9
                                 .equ	OCR3BH2	= 2 ; Timer/Counter3 Output Compare Register Bytes High Bit 10
                                 .equ	OCR3BH3	= 3 ; Timer/Counter3 Output Compare Register Bytes High Bit 11
                                 .equ	OCR3BH4	= 4 ; Timer/Counter3 Output Compare Register Bytes High Bit 12
                                 .equ	OCR3BH5	= 5 ; Timer/Counter3 Output Compare Register Bytes High Bit 13
                                 .equ	OCR3BH6	= 6 ; Timer/Counter3 Output Compare Register Bytes High Bit 14
                                 .equ	OCR3BH7	= 7 ; Timer/Counter3 Output Compare Register Bytes High Bit 15
                                 
                                 .equ	OCR3BL0	= 0 ; Timer/Counter3 Output Compare Register Bytes Low Bit 0
                                 .equ	OCR3BL1	= 1 ; Timer/Counter3 Output Compare Register Bytes Low Bit 1
                                 .equ	OCR3BL2	= 2 ; Timer/Counter3 Output Compare Register Bytes Low Bit 2
                                 .equ	OCR3BL3	= 3 ; Timer/Counter3 Output Compare Register Bytes Low Bit 3
                                 .equ	OCR3BL4	= 4 ; Timer/Counter3 Output Compare Register Bytes Low Bit 4
                                 .equ	OCR3BL5	= 5 ; Timer/Counter3 Output Compare Register Bytes Low Bit 5
                                 .equ	OCR3BL6	= 6 ; Timer/Counter3 Output Compare Register Bytes Low Bit 6
                                 .equ	OCR3BL7	= 7 ; Timer/Counter3 Output Compare Register Bytes Low Bit 7
                                 
                                 ; ICR3 - Timer/Counter3 Input Capture Register Bytes
                                 .equ	ICR3H0	= 0 ; Timer/Counter3 Input Capture Register Bytes High Bit 8
                                 .equ	ICR3H1	= 1 ; Timer/Counter3 Input Capture Register Bytes High Bit 9
                                 .equ	ICR3H2	= 2 ; Timer/Counter3 Input Capture Register Bytes High Bit 10
                                 .equ	ICR3H3	= 3 ; Timer/Counter3 Input Capture Register Bytes High Bit 11
                                 .equ	ICR3H4	= 4 ; Timer/Counter3 Input Capture Register Bytes High Bit 12
                                 .equ	ICR3H5	= 5 ; Timer/Counter3 Input Capture Register Bytes High Bit 13
                                 .equ	ICR3H6	= 6 ; Timer/Counter3 Input Capture Register Bytes High Bit 14
                                 .equ	ICR3H7	= 7 ; Timer/Counter3 Input Capture Register Bytes High Bit 15
                                 
                                 .equ	ICR3L0	= 0 ; Timer/Counter3 Input Capture Register Bytes Low Bit 0
                                 .equ	ICR3L1	= 1 ; Timer/Counter3 Input Capture Register Bytes Low Bit 1
                                 .equ	ICR3L2	= 2 ; Timer/Counter3 Input Capture Register Bytes Low Bit 2
                                 .equ	ICR3L3	= 3 ; Timer/Counter3 Input Capture Register Bytes Low Bit 3
                                 .equ	ICR3L4	= 4 ; Timer/Counter3 Input Capture Register Bytes Low Bit 4
                                 .equ	ICR3L5	= 5 ; Timer/Counter3 Input Capture Register Bytes Low Bit 5
                                 .equ	ICR3L6	= 6 ; Timer/Counter3 Input Capture Register Bytes Low Bit 6
                                 .equ	ICR3L7	= 7 ; Timer/Counter3 Input Capture Register Bytes Low Bit 7
                                 
                                 
                                 ; ***** TC4 *****************
                                 ; TIMSK4 - Timer/Counter4 Interrupt Mask Register
                                 .equ	TOIE4	= 0 ; Timer/Counter4 Overflow Interrupt Enable
                                 .equ	OCIE4A	= 1 ; Timer/Counter4 Output Compare Match A Interrupt Enable
                                 .equ	OCIE4B	= 2 ; Timer/Counter4 Output Compare Match B Interrupt Enable
                                 .equ	ICIE4	= 5 ; Timer/Counter4 Input Capture Interrupt Enable
                                 
                                 ; TIFR4 - Timer/Counter4 Interrupt Flag register
                                 .equ	TOV4	= 0 ; Timer/Counter4 Overflow Flag
                                 .equ	OCF4A	= 1 ; Output Compare Flag 4A
                                 .equ	OCF4B	= 2 ; Output Compare Flag 4B
                                 
                                 ; TCCR4A - Timer/Counter4 Control Register A
                                 .equ	WGM40	= 0 ; Waveform Genration Mode
                                 .equ	WGM41	= 1 ; Waveform Genration Mode
                                 .equ	COM4B0	= 4 ; Compare Output Mode bits
                                 .equ	COM4B1	= 5 ; Compare Output Mode bits
                                 .equ	COM4A0	= 6 ; Compare Output Mode bits
                                 .equ	COM4A1	= 7 ; Compare Output Mode bits
                                 
                                 ; TCCR4B - Timer/Counter4 Control Register B
                                 .equ	CS40	= 0 ; Clock Select bits
                                 .equ	CS41	= 1 ; Clock Select bits
                                 .equ	CS42	= 2 ; Clock Select bits
                                 .equ	WGM42	= 3 ; Waveform Generation Mode bit 2
                                 .equ	WGM43	= 4 ; Waveform Generation Mode bit 3
                                 .equ	ICES4	= 6 ; Input Capture Edge Select
                                 .equ	ICNC4	= 7 ; Input Capture Noise Canceler
                                 
                                 ; TCCR4C - Timer/Counter4 Control Register C
                                 .equ	FOC4B	= 6 ; Force Output Compare for Channel B
                                 .equ	FOC4A	= 7 ; Force Output Compare for Channel A
                                 
                                 ; TCNT4 - Timer/Counter4 Bytes
                                 .equ	TCNT4H0	= 0 ; Timer/Counter4 Bytes High Bit 8
                                 .equ	TCNT4H1	= 1 ; Timer/Counter4 Bytes High Bit 9
                                 .equ	TCNT4H2	= 2 ; Timer/Counter4 Bytes High Bit 10
                                 .equ	TCNT4H3	= 3 ; Timer/Counter4 Bytes High Bit 11
                                 .equ	TCNT4H4	= 4 ; Timer/Counter4 Bytes High Bit 12
                                 .equ	TCNT4H5	= 5 ; Timer/Counter4 Bytes High Bit 13
                                 .equ	TCNT4H6	= 6 ; Timer/Counter4 Bytes High Bit 14
                                 .equ	TCNT4H7	= 7 ; Timer/Counter4 Bytes High Bit 15
                                 
                                 .equ	TCNT4L0	= 0 ; Timer/Counter4 Bytes Low Bit 0
                                 .equ	TCNT4L1	= 1 ; Timer/Counter4 Bytes Low Bit 1
                                 .equ	TCNT4L2	= 2 ; Timer/Counter4 Bytes Low Bit 2
                                 .equ	TCNT4L3	= 3 ; Timer/Counter4 Bytes Low Bit 3
                                 .equ	TCNT4L4	= 4 ; Timer/Counter4 Bytes Low Bit 4
                                 .equ	TCNT4L5	= 5 ; Timer/Counter4 Bytes Low Bit 5
                                 .equ	TCNT4L6	= 6 ; Timer/Counter4 Bytes Low Bit 6
                                 .equ	TCNT4L7	= 7 ; Timer/Counter4 Bytes Low Bit 7
                                 
                                 ; OCR4A - Timer/Counter4 Output Compare Register Bytes
                                 .equ	OCR4AH0	= 0 ; Timer/Counter4 Output Compare Register Bytes High Bit 8
                                 .equ	OCR4AH1	= 1 ; Timer/Counter4 Output Compare Register Bytes High Bit 9
                                 .equ	OCR4AH2	= 2 ; Timer/Counter4 Output Compare Register Bytes High Bit 10
                                 .equ	OCR4AH3	= 3 ; Timer/Counter4 Output Compare Register Bytes High Bit 11
                                 .equ	OCR4AH4	= 4 ; Timer/Counter4 Output Compare Register Bytes High Bit 12
                                 .equ	OCR4AH5	= 5 ; Timer/Counter4 Output Compare Register Bytes High Bit 13
                                 .equ	OCR4AH6	= 6 ; Timer/Counter4 Output Compare Register Bytes High Bit 14
                                 .equ	OCR4AH7	= 7 ; Timer/Counter4 Output Compare Register Bytes High Bit 15
                                 
                                 .equ	OCR4AL0	= 0 ; Timer/Counter4 Output Compare Register Bytes Low Bit 0
                                 .equ	OCR4AL1	= 1 ; Timer/Counter4 Output Compare Register Bytes Low Bit 1
                                 .equ	OCR4AL2	= 2 ; Timer/Counter4 Output Compare Register Bytes Low Bit 2
                                 .equ	OCR4AL3	= 3 ; Timer/Counter4 Output Compare Register Bytes Low Bit 3
                                 .equ	OCR4AL4	= 4 ; Timer/Counter4 Output Compare Register Bytes Low Bit 4
                                 .equ	OCR4AL5	= 5 ; Timer/Counter4 Output Compare Register Bytes Low Bit 5
                                 .equ	OCR4AL6	= 6 ; Timer/Counter4 Output Compare Register Bytes Low Bit 6
                                 .equ	OCR4AL7	= 7 ; Timer/Counter4 Output Compare Register Bytes Low Bit 7
                                 
                                 ; OCR4B - Timer/Counter4 Output Compare Register Bytes
                                 .equ	OCR4BH0	= 0 ; Timer/Counter4 Output Compare Register Bytes High Bit 8
                                 .equ	OCR4BH1	= 1 ; Timer/Counter4 Output Compare Register Bytes High Bit 9
                                 .equ	OCR4BH2	= 2 ; Timer/Counter4 Output Compare Register Bytes High Bit 10
                                 .equ	OCR4BH3	= 3 ; Timer/Counter4 Output Compare Register Bytes High Bit 11
                                 .equ	OCR4BH4	= 4 ; Timer/Counter4 Output Compare Register Bytes High Bit 12
                                 .equ	OCR4BH5	= 5 ; Timer/Counter4 Output Compare Register Bytes High Bit 13
                                 .equ	OCR4BH6	= 6 ; Timer/Counter4 Output Compare Register Bytes High Bit 14
                                 .equ	OCR4BH7	= 7 ; Timer/Counter4 Output Compare Register Bytes High Bit 15
                                 
                                 .equ	OCR4BL0	= 0 ; Timer/Counter4 Output Compare Register Bytes Low Bit 0
                                 .equ	OCR4BL1	= 1 ; Timer/Counter4 Output Compare Register Bytes Low Bit 1
                                 .equ	OCR4BL2	= 2 ; Timer/Counter4 Output Compare Register Bytes Low Bit 2
                                 .equ	OCR4BL3	= 3 ; Timer/Counter4 Output Compare Register Bytes Low Bit 3
                                 .equ	OCR4BL4	= 4 ; Timer/Counter4 Output Compare Register Bytes Low Bit 4
                                 .equ	OCR4BL5	= 5 ; Timer/Counter4 Output Compare Register Bytes Low Bit 5
                                 .equ	OCR4BL6	= 6 ; Timer/Counter4 Output Compare Register Bytes Low Bit 6
                                 .equ	OCR4BL7	= 7 ; Timer/Counter4 Output Compare Register Bytes Low Bit 7
                                 
                                 ; ICR4 - Timer/Counter4 Input Capture Register Bytes
                                 .equ	ICR4H0	= 0 ; Timer/Counter4 Input Capture Register Bytes High Bit 8
                                 .equ	ICR4H1	= 1 ; Timer/Counter4 Input Capture Register Bytes High Bit 9
                                 .equ	ICR4H2	= 2 ; Timer/Counter4 Input Capture Register Bytes High Bit 10
                                 .equ	ICR4H3	= 3 ; Timer/Counter4 Input Capture Register Bytes High Bit 11
                                 .equ	ICR4H4	= 4 ; Timer/Counter4 Input Capture Register Bytes High Bit 12
                                 .equ	ICR4H5	= 5 ; Timer/Counter4 Input Capture Register Bytes High Bit 13
                                 .equ	ICR4H6	= 6 ; Timer/Counter4 Input Capture Register Bytes High Bit 14
                                 .equ	ICR4H7	= 7 ; Timer/Counter4 Input Capture Register Bytes High Bit 15
                                 
                                 .equ	ICR4L0	= 0 ; Timer/Counter4 Input Capture Register Bytes Low Bit 0
                                 .equ	ICR4L1	= 1 ; Timer/Counter4 Input Capture Register Bytes Low Bit 1
                                 .equ	ICR4L2	= 2 ; Timer/Counter4 Input Capture Register Bytes Low Bit 2
                                 .equ	ICR4L3	= 3 ; Timer/Counter4 Input Capture Register Bytes Low Bit 3
                                 .equ	ICR4L4	= 4 ; Timer/Counter4 Input Capture Register Bytes Low Bit 4
                                 .equ	ICR4L5	= 5 ; Timer/Counter4 Input Capture Register Bytes Low Bit 5
                                 .equ	ICR4L6	= 6 ; Timer/Counter4 Input Capture Register Bytes Low Bit 6
                                 .equ	ICR4L7	= 7 ; Timer/Counter4 Input Capture Register Bytes Low Bit 7
                                 
                                 
                                 ; ***** TC2 *****************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0 ; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	OCIE2A	= 1 ; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2 ; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0 ; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1 ; Output Compare Flag 2A
                                 .equ	OCF2B	= 2 ; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0 ; Waveform Genration Mode
                                 .equ	WGM21	= 1 ; Waveform Genration Mode
                                 .equ	COM2B0	= 4 ; Compare Output Mode bits
                                 .equ	COM2B1	= 5 ; Compare Output Mode bits
                                 .equ	COM2A0	= 6 ; Compare Output Mode bits
                                 .equ	COM2A1	= 7 ; Compare Output Mode bits
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0 ; Clock Select bits
                                 .equ	CS21	= 1 ; Clock Select bits
                                 .equ	CS22	= 2 ; Clock Select bits
                                 .equ	WGM22	= 3 ; Waveform Generation Mode
                                 .equ	FOC2B	= 6 ; Force Output Compare B
                                 .equ	FOC2A	= 7 ; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT20	= 0 ; Timer/Counter2 Bit 0
                                 .equ	TCNT21	= 1 ; Timer/Counter2 Bit 1
                                 .equ	TCNT22	= 2 ; Timer/Counter2 Bit 2
                                 .equ	TCNT23	= 3 ; Timer/Counter2 Bit 3
                                 .equ	TCNT24	= 4 ; Timer/Counter2 Bit 4
                                 .equ	TCNT25	= 5 ; Timer/Counter2 Bit 5
                                 .equ	TCNT26	= 6 ; Timer/Counter2 Bit 6
                                 .equ	TCNT27	= 7 ; Timer/Counter2 Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B0	= 0 ; Timer/Counter2 Output Compare Register B Bit 0
                                 .equ	OCR2B1	= 1 ; Timer/Counter2 Output Compare Register B Bit 1
                                 .equ	OCR2B2	= 2 ; Timer/Counter2 Output Compare Register B Bit 2
                                 .equ	OCR2B3	= 3 ; Timer/Counter2 Output Compare Register B Bit 3
                                 .equ	OCR2B4	= 4 ; Timer/Counter2 Output Compare Register B Bit 4
                                 .equ	OCR2B5	= 5 ; Timer/Counter2 Output Compare Register B Bit 5
                                 .equ	OCR2B6	= 6 ; Timer/Counter2 Output Compare Register B Bit 6
                                 .equ	OCR2B7	= 7 ; Timer/Counter2 Output Compare Register B Bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A0	= 0 ; Timer/Counter2 Output Compare Register A Bit 0
                                 .equ	OCR2A1	= 1 ; Timer/Counter2 Output Compare Register A Bit 1
                                 .equ	OCR2A2	= 2 ; Timer/Counter2 Output Compare Register A Bit 2
                                 .equ	OCR2A3	= 3 ; Timer/Counter2 Output Compare Register A Bit 3
                                 .equ	OCR2A4	= 4 ; Timer/Counter2 Output Compare Register A Bit 4
                                 .equ	OCR2A5	= 5 ; Timer/Counter2 Output Compare Register A Bit 5
                                 .equ	OCR2A6	= 6 ; Timer/Counter2 Output Compare Register A Bit 6
                                 .equ	OCR2A7	= 7 ; Timer/Counter2 Output Compare Register A Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0 ; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1 ; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2 ; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3 ; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4 ; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5 ; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6 ; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1 ; Prescaler Reset Timer/Counter2
                                 
                                 
                                 ; ***** ADC *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0 ; Analog Channel Selection Bits
                                 .equ	MUX1	= 1 ; Analog Channel Selection Bits
                                 .equ	MUX2	= 2 ; Analog Channel Selection Bits
                                 .equ	MUX3	= 3 ; Analog Channel Selection Bits
                                 .equ	ADLAR	= 5 ; Left Adjust Result
                                 .equ	REFS0	= 6 ; Reference Selection Bits
                                 .equ	REFS1	= 7 ; Reference Selection Bits
                                 
                                 ; ADC - ADC Data Register Bytes
                                 .equ	ADCH0	= 0 ; ADC Data Register Bytes High Bit 8
                                 .equ	ADCH1	= 1 ; ADC Data Register Bytes High Bit 9
                                 .equ	ADCH2	= 2 ; ADC Data Register Bytes High Bit 10
                                 .equ	ADCH3	= 3 ; ADC Data Register Bytes High Bit 11
                                 .equ	ADCH4	= 4 ; ADC Data Register Bytes High Bit 12
                                 .equ	ADCH5	= 5 ; ADC Data Register Bytes High Bit 13
                                 .equ	ADCH6	= 6 ; ADC Data Register Bytes High Bit 14
                                 .equ	ADCH7	= 7 ; ADC Data Register Bytes High Bit 15
                                 
                                 .equ	ADCL0	= 0 ; ADC Data Register Bytes Low Bit 0
                                 .equ	ADCL1	= 1 ; ADC Data Register Bytes Low Bit 1
                                 .equ	ADCL2	= 2 ; ADC Data Register Bytes Low Bit 2
                                 .equ	ADCL3	= 3 ; ADC Data Register Bytes Low Bit 3
                                 .equ	ADCL4	= 4 ; ADC Data Register Bytes Low Bit 4
                                 .equ	ADCL5	= 5 ; ADC Data Register Bytes Low Bit 5
                                 .equ	ADCL6	= 6 ; ADC Data Register Bytes Low Bit 6
                                 .equ	ADCL7	= 7 ; ADC Data Register Bytes Low Bit 7
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0 ; ADC Prescaler Select Bits
                                 .equ	ADPS1	= 1 ; ADC Prescaler Select Bits
                                 .equ	ADPS2	= 2 ; ADC Prescaler Select Bits
                                 .equ	ADIE	= 3 ; ADC Interrupt Enable
                                 .equ	ADIF	= 4 ; ADC Interrupt Flag
                                 .equ	ADATE	= 5 ; ADC Auto Trigger Enable
                                 .equ	ADSC	= 6 ; ADC Start Conversion
                                 .equ	ADEN	= 7 ; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0 ; ADC Auto Trigger Source bits
                                 .equ	ADTS1	= 1 ; ADC Auto Trigger Source bits
                                 .equ	ADTS2	= 2 ; ADC Auto Trigger Source bits
                                 .equ	ACME	= 6 ; 
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0 ; 
                                 .equ	ADC1D	= 1 ; 
                                 .equ	ADC2D	= 2 ; 
                                 .equ	ADC3D	= 3 ; 
                                 .equ	ADC4D	= 4 ; 
                                 .equ	ADC5D	= 5 ; 
                                 
                                 
                                 ; ***** AC *****************
                                 ; ACSRA - Analog Comparator Control And Status Register-A
                                 .equ	ACSRA0	= 0 ; Analog Comparator Control And Status Register-A Bit 0
                                 .equ	ACSRA1	= 1 ; Analog Comparator Control And Status Register-A Bit 1
                                 .equ	ACSRA2	= 2 ; Analog Comparator Control And Status Register-A Bit 2
                                 .equ	ACSRA3	= 3 ; Analog Comparator Control And Status Register-A Bit 3
                                 .equ	ACSRA4	= 4 ; Analog Comparator Control And Status Register-A Bit 4
                                 .equ	ACSRA5	= 5 ; Analog Comparator Control And Status Register-A Bit 5
                                 .equ	ACSRA6	= 6 ; Analog Comparator Control And Status Register-A Bit 6
                                 .equ	ACSRA7	= 7 ; Analog Comparator Control And Status Register-A Bit 7
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0 ; Analog Comparator Interrupt Mode Select bits
                                 .equ	ACIS1	= 1 ; Analog Comparator Interrupt Mode Select bits
                                 .equ	ACIC	= 2 ; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3 ; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4 ; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5 ; Analog Compare Output
                                 .equ	ACBG	= 6 ; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7 ; Analog Comparator Disable
                                 
                                 ; ACSRB - Analog Comparator Control And Status Register-B
                                 .equ	ACOE	= 0 ; Analog Comparator Output Enable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0 ; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1 ; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB *****************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0 ; Port B Data Register Bit 0
                                 .equ	PORTB1	= 1 ; Port B Data Register Bit 1
                                 .equ	PORTB2	= 2 ; Port B Data Register Bit 2
                                 .equ	PORTB3	= 3 ; Port B Data Register Bit 3
                                 .equ	PORTB4	= 4 ; Port B Data Register Bit 4
                                 .equ	PORTB5	= 5 ; Port B Data Register Bit 5
                                 .equ	PORTB6	= 6 ; Port B Data Register Bit 6
                                 .equ	PORTB7	= 7 ; Port B Data Register Bit 7
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDRB0	= 0 ; Port B Data Direction Register Bit 0
                                 .equ	DDRB1	= 1 ; Port B Data Direction Register Bit 1
                                 .equ	DDRB2	= 2 ; Port B Data Direction Register Bit 2
                                 .equ	DDRB3	= 3 ; Port B Data Direction Register Bit 3
                                 .equ	DDRB4	= 4 ; Port B Data Direction Register Bit 4
                                 .equ	DDRB5	= 5 ; Port B Data Direction Register Bit 5
                                 .equ	DDRB6	= 6 ; Port B Data Direction Register Bit 6
                                 .equ	DDRB7	= 7 ; Port B Data Direction Register Bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0 ; Port B Input Pins Bit 0
                                 .equ	PINB1	= 1 ; Port B Input Pins Bit 1
                                 .equ	PINB2	= 2 ; Port B Input Pins Bit 2
                                 .equ	PINB3	= 3 ; Port B Input Pins Bit 3
                                 .equ	PINB4	= 4 ; Port B Input Pins Bit 4
                                 .equ	PINB5	= 5 ; Port B Input Pins Bit 5
                                 .equ	PINB6	= 6 ; Port B Input Pins Bit 6
                                 .equ	PINB7	= 7 ; Port B Input Pins Bit 7
                                 
                                 
                                 ; ***** PORTC *****************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0 ; Port C Data Register Bit 0
                                 .equ	PORTC1	= 1 ; Port C Data Register Bit 1
                                 .equ	PORTC2	= 2 ; Port C Data Register Bit 2
                                 .equ	PORTC3	= 3 ; Port C Data Register Bit 3
                                 .equ	PORTC4	= 4 ; Port C Data Register Bit 4
                                 .equ	PORTC5	= 5 ; Port C Data Register Bit 5
                                 .equ	PORTC6	= 6 ; Port C Data Register Bit 6
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDRC0	= 0 ; Port C Data Direction Register Bit 0
                                 .equ	DDRC1	= 1 ; Port C Data Direction Register Bit 1
                                 .equ	DDRC2	= 2 ; Port C Data Direction Register Bit 2
                                 .equ	DDRC3	= 3 ; Port C Data Direction Register Bit 3
                                 .equ	DDRC4	= 4 ; Port C Data Direction Register Bit 4
                                 .equ	DDRC5	= 5 ; Port C Data Direction Register Bit 5
                                 .equ	DDRC6	= 6 ; Port C Data Direction Register Bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0 ; Port C Input Pins Bit 0
                                 .equ	PINC1	= 1 ; Port C Input Pins Bit 1
                                 .equ	PINC2	= 2 ; Port C Input Pins Bit 2
                                 .equ	PINC3	= 3 ; Port C Input Pins Bit 3
                                 .equ	PINC4	= 4 ; Port C Input Pins Bit 4
                                 .equ	PINC5	= 5 ; Port C Input Pins Bit 5
                                 .equ	PINC6	= 6 ; Port C Input Pins Bit 6
                                 
                                 
                                 ; ***** PORTD *****************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0 ; Port D Data Register Bit 0
                                 .equ	PORTD1	= 1 ; Port D Data Register Bit 1
                                 .equ	PORTD2	= 2 ; Port D Data Register Bit 2
                                 .equ	PORTD3	= 3 ; Port D Data Register Bit 3
                                 .equ	PORTD4	= 4 ; Port D Data Register Bit 4
                                 .equ	PORTD5	= 5 ; Port D Data Register Bit 5
                                 .equ	PORTD6	= 6 ; Port D Data Register Bit 6
                                 .equ	PORTD7	= 7 ; Port D Data Register Bit 7
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDRD0	= 0 ; Port D Data Direction Register Bit 0
                                 .equ	DDRD1	= 1 ; Port D Data Direction Register Bit 1
                                 .equ	DDRD2	= 2 ; Port D Data Direction Register Bit 2
                                 .equ	DDRD3	= 3 ; Port D Data Direction Register Bit 3
                                 .equ	DDRD4	= 4 ; Port D Data Direction Register Bit 4
                                 .equ	DDRD5	= 5 ; Port D Data Direction Register Bit 5
                                 .equ	DDRD6	= 6 ; Port D Data Direction Register Bit 6
                                 .equ	DDRD7	= 7 ; Port D Data Direction Register Bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0 ; Port D Input Pins Bit 0
                                 .equ	PIND1	= 1 ; Port D Input Pins Bit 1
                                 .equ	PIND2	= 2 ; Port D Input Pins Bit 2
                                 .equ	PIND3	= 3 ; Port D Input Pins Bit 3
                                 .equ	PIND4	= 4 ; Port D Input Pins Bit 4
                                 .equ	PIND5	= 5 ; Port D Input Pins Bit 5
                                 .equ	PIND6	= 6 ; Port D Input Pins Bit 6
                                 .equ	PIND7	= 7 ; Port D Input Pins Bit 7
                                 
                                 
                                 ; ***** PORTE *****************
                                 ; PORTE - Port E Data Register
                                 .equ	PORTE0	= 0 ; Port E Data Register Bit 0
                                 .equ	PORTE1	= 1 ; Port E Data Register Bit 1
                                 .equ	PORTE2	= 2 ; Port E Data Register Bit 2
                                 .equ	PORTE3	= 3 ; Port E Data Register Bit 3
                                 
                                 ; DDRE - Port E Data Direction Register
                                 .equ	DDRE0	= 0 ; Port E Data Direction Register Bit 0
                                 .equ	DDRE1	= 1 ; Port E Data Direction Register Bit 1
                                 .equ	DDRE2	= 2 ; Port E Data Direction Register Bit 2
                                 .equ	DDRE3	= 3 ; Port E Data Direction Register Bit 3
                                 
                                 ; PINE - Port E Input Pins
                                 .equ	PINE0	= 0 ; Port E Input Pins Bit 0
                                 .equ	PINE1	= 1 ; Port E Input Pins Bit 1
                                 .equ	PINE2	= 2 ; Port E Input Pins Bit 2
                                 .equ	PINE3	= 3 ; Port E Input Pins Bit 3
                                 
                                 
                                 ; ***** TC0 *****************
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B0	= 0 ; Timer/Counter0 Output Compare Register Bit 0
                                 .equ	OCR0B1	= 1 ; Timer/Counter0 Output Compare Register Bit 1
                                 .equ	OCR0B2	= 2 ; Timer/Counter0 Output Compare Register Bit 2
                                 .equ	OCR0B3	= 3 ; Timer/Counter0 Output Compare Register Bit 3
                                 .equ	OCR0B4	= 4 ; Timer/Counter0 Output Compare Register Bit 4
                                 .equ	OCR0B5	= 5 ; Timer/Counter0 Output Compare Register Bit 5
                                 .equ	OCR0B6	= 6 ; Timer/Counter0 Output Compare Register Bit 6
                                 .equ	OCR0B7	= 7 ; Timer/Counter0 Output Compare Register Bit 7
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A0	= 0 ; Timer/Counter0 Output Compare Register Bit 0
                                 .equ	OCR0A1	= 1 ; Timer/Counter0 Output Compare Register Bit 1
                                 .equ	OCR0A2	= 2 ; Timer/Counter0 Output Compare Register Bit 2
                                 .equ	OCR0A3	= 3 ; Timer/Counter0 Output Compare Register Bit 3
                                 .equ	OCR0A4	= 4 ; Timer/Counter0 Output Compare Register Bit 4
                                 .equ	OCR0A5	= 5 ; Timer/Counter0 Output Compare Register Bit 5
                                 .equ	OCR0A6	= 6 ; Timer/Counter0 Output Compare Register Bit 6
                                 .equ	OCR0A7	= 7 ; Timer/Counter0 Output Compare Register Bit 7
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT00	= 0 ; Timer/Counter0 Bit 0
                                 .equ	TCNT01	= 1 ; Timer/Counter0 Bit 1
                                 .equ	TCNT02	= 2 ; Timer/Counter0 Bit 2
                                 .equ	TCNT03	= 3 ; Timer/Counter0 Bit 3
                                 .equ	TCNT04	= 4 ; Timer/Counter0 Bit 4
                                 .equ	TCNT05	= 5 ; Timer/Counter0 Bit 5
                                 .equ	TCNT06	= 6 ; Timer/Counter0 Bit 6
                                 .equ	TCNT07	= 7 ; Timer/Counter0 Bit 7
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0 ; Clock Select
                                 .equ	CS01	= 1 ; Clock Select
                                 .equ	CS02	= 2 ; Clock Select
                                 .equ	WGM02	= 3 ; 
                                 .equ	FOC0B	= 6 ; Force Output Compare B
                                 .equ	FOC0A	= 7 ; Force Output Compare A
                                 
                                 ; TCCR0A - Timer/Counter Control Register A
                                 .equ	WGM00	= 0 ; Waveform Generation Mode
                                 .equ	WGM01	= 1 ; Waveform Generation Mode
                                 .equ	COM0B0	= 4 ; Compare Output Mode, Fast PWM
                                 .equ	COM0B1	= 5 ; Compare Output Mode, Fast PWM
                                 .equ	COM0A0	= 6 ; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7 ; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0 ; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1 ; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2 ; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0 ; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1 ; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2 ; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 
                                 
                                 ; ***** EXINT *****************
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0 ; External Interrupt Sense Control 0 Bits
                                 .equ	ISC01	= 1 ; External Interrupt Sense Control 0 Bits
                                 .equ	ISC10	= 2 ; External Interrupt Sense Control 1 Bits
                                 .equ	ISC11	= 3 ; External Interrupt Sense Control 1 Bits
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0 ; External Interrupt Request 1 Enable
                                 .equ	INT1	= 1 ; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0 ; External Interrupt Flags
                                 .equ	INTF1	= 1 ; External Interrupt Flags
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0 ; Pin Change Interrupt Enables
                                 .equ	PCIE1	= 1 ; Pin Change Interrupt Enables
                                 .equ	PCIE2	= 2 ; Pin Change Interrupt Enables
                                 .equ	PCIE3	= 3 ; Pin Change Interrupt Enables
                                 
                                 ; PCMSK3 - Pin Change Mask Register 3
                                 .equ	PCINT24	= 0 ; Pin Change Enable Masks
                                 .equ	PCINT25	= 1 ; Pin Change Enable Masks
                                 .equ	PCINT26	= 2 ; Pin Change Enable Masks
                                 .equ	PCINT27	= 3 ; Pin Change Enable Masks
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0 ; Pin Change Enable Masks
                                 .equ	PCINT17	= 1 ; Pin Change Enable Masks
                                 .equ	PCINT18	= 2 ; Pin Change Enable Masks
                                 .equ	PCINT19	= 3 ; Pin Change Enable Masks
                                 .equ	PCINT20	= 4 ; Pin Change Enable Masks
                                 .equ	PCINT21	= 5 ; Pin Change Enable Masks
                                 .equ	PCINT22	= 6 ; Pin Change Enable Masks
                                 .equ	PCINT23	= 7 ; Pin Change Enable Masks
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0 ; Pin Change Enable Masks
                                 .equ	PCINT9	= 1 ; Pin Change Enable Masks
                                 .equ	PCINT10	= 2 ; Pin Change Enable Masks
                                 .equ	PCINT11	= 3 ; Pin Change Enable Masks
                                 .equ	PCINT12	= 4 ; Pin Change Enable Masks
                                 .equ	PCINT13	= 5 ; Pin Change Enable Masks
                                 .equ	PCINT14	= 6 ; Pin Change Enable Masks
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0 ; Pin Change Enable Masks
                                 .equ	PCINT1	= 1 ; Pin Change Enable Masks
                                 .equ	PCINT2	= 2 ; Pin Change Enable Masks
                                 .equ	PCINT3	= 3 ; Pin Change Enable Masks
                                 .equ	PCINT4	= 4 ; Pin Change Enable Masks
                                 .equ	PCINT5	= 5 ; Pin Change Enable Masks
                                 .equ	PCINT6	= 6 ; Pin Change Enable Masks
                                 .equ	PCINT7	= 7 ; Pin Change Enable Masks
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0 ; Pin Change Interrupt Flags
                                 .equ	PCIF1	= 1 ; Pin Change Interrupt Flags
                                 .equ	PCIF2	= 2 ; Pin Change Interrupt Flags
                                 .equ	PCIF3	= 3 ; Pin Change Interrupt Flags
                                 
                                 
                                 ; ***** SPI0 *****************
                                 ; SPDR0 - SPI Data Register
                                 .equ	SPDR00	= 0 ; SPI Data Register Bit 0
                                 .equ	SPDR01	= 1 ; SPI Data Register Bit 1
                                 .equ	SPDR02	= 2 ; SPI Data Register Bit 2
                                 .equ	SPDR03	= 3 ; SPI Data Register Bit 3
                                 .equ	SPDR04	= 4 ; SPI Data Register Bit 4
                                 .equ	SPDR05	= 5 ; SPI Data Register Bit 5
                                 .equ	SPDR06	= 6 ; SPI Data Register Bit 6
                                 .equ	SPDR07	= 7 ; SPI Data Register Bit 7
                                 
                                 ; SPSR0 - SPI Status Register
                                 .equ	SPI2X	= 0 ; Double SPI Speed Bit
                                 .equ	WCOL	= 6 ; Write Collision Flag
                                 .equ	SPIF	= 7 ; SPI Interrupt Flag
                                 
                                 ; SPCR0 - SPI Control Register
                                 .equ	SPR0	= 0 ; SPI Clock Rate Selects
                                 .equ	SPR1	= 1 ; SPI Clock Rate Selects
                                 .equ	CPHA	= 2 ; Clock Phase
                                 .equ	CPOL	= 3 ; Clock polarity
                                 .equ	MSTR	= 4 ; Master/Slave Select
                                 .equ	DORD	= 5 ; Data Order
                                 .equ	SPE	= 6 ; SPI Enable
                                 .equ	SPIE	= 7 ; SPI Interrupt Enable
                                 
                                 
                                 ; ***** SPI1 *****************
                                 ; SPDR1 - SPI Data Register
                                 .equ	SPDR10	= 0 ; SPI Data Register Bit 0
                                 .equ	SPDR11	= 1 ; SPI Data Register Bit 1
                                 .equ	SPDR12	= 2 ; SPI Data Register Bit 2
                                 .equ	SPDR13	= 3 ; SPI Data Register Bit 3
                                 .equ	SPDR14	= 4 ; SPI Data Register Bit 4
                                 .equ	SPDR15	= 5 ; SPI Data Register Bit 5
                                 .equ	SPDR16	= 6 ; SPI Data Register Bit 6
                                 .equ	SPDR17	= 7 ; SPI Data Register Bit 7
                                 
                                 ; SPSR1 - SPI Status Register
                                 .equ	SPI2X1	= 0 ; Double SPI Speed Bit
                                 .equ	WCOL1	= 6 ; Write Collision Flag
                                 .equ	SPIF1	= 7 ; SPI Interrupt Flag
                                 
                                 ; SPCR1 - SPI Control Register
                                 .equ	SPR10	= 0 ; SPI Clock Rate Selects
                                 .equ	SPR11	= 1 ; SPI Clock Rate Selects
                                 .equ	CPHA1	= 2 ; Clock Phase
                                 .equ	CPOL1	= 3 ; Clock polarity
                                 .equ	MSTR1	= 4 ; Master/Slave Select
                                 .equ	DORD1	= 5 ; Data Order
                                 .equ	SPE1	= 6 ; SPI Enable
                                 .equ	SPIE1	= 7 ; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WDT *****************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDE	= 3 ; Watch Dog Enable
                                 .equ	WDCE	= 4 ; Watchdog Change Enable
                                 .equ	WDP0	= 0 ; Watchdog Timer Prescaler Bits
                                 .equ	WDP1	= 1 ; Watchdog Timer Prescaler Bits
                                 .equ	WDP2	= 2 ; Watchdog Timer Prescaler Bits
                                 .equ	WDP3	= 5 ; Watchdog Timer Prescaler Bits
                                 .equ	WDIE	= 6 ; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7 ; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** PTC *****************
                                 ; ***** CPU *****************
                                 ; PRR0 - Power Reduction Register 0
                                 .equ	PRADC	= 0 ; Power Reduction ADC
                                 .equ	PRUSART0	= 1 ; Power Reduction USART0
                                 .equ	PRSPI0	= 2 ; Power Reduction Serial Peripheral Interface 1
                                 .equ	PRTIM1	= 3 ; Power Reduction Timer/Counter1
                                 .equ	PRUSART1	= 4 ; Power Reduction USART1
                                 .equ	PRTIM0	= 5 ; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6 ; Power Reduction Timer/Counter2
                                 .equ	PRTWI0	= 7 ; Power Reduction TWI0
                                 
                                 ; PRR1 - Power Reduction Register 1
                                 .equ	PRTIM3	= 0 ; Power Reduction Timer/Counter3
                                 .equ	PRSPI1	= 2 ; Power Reduction Serial Peripheral Interface 1
                                 .equ	PRTIM4	= 3 ; Power Reduction Timer/Counter4
                                 .equ	PRPTC	= 4 ; Power Reduction Peripheral Touch Controller
                                 .equ	PRTWI1	= 5 ; Power Reduction TWI1
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	OSCCAL0	= 0 ; Oscillator Calibration
                                 .equ	OSCCAL1	= 1 ; Oscillator Calibration
                                 .equ	OSCCAL2	= 2 ; Oscillator Calibration
                                 .equ	OSCCAL3	= 3 ; Oscillator Calibration
                                 .equ	OSCCAL4	= 4 ; Oscillator Calibration
                                 .equ	OSCCAL5	= 5 ; Oscillator Calibration
                                 .equ	OSCCAL6	= 6 ; Oscillator Calibration
                                 .equ	OSCCAL7	= 7 ; Oscillator Calibration
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0 ; Clock Prescaler Select Bits
                                 .equ	CLKPS1	= 1 ; Clock Prescaler Select Bits
                                 .equ	CLKPS2	= 2 ; Clock Prescaler Select Bits
                                 .equ	CLKPS3	= 3 ; Clock Prescaler Select Bits
                                 .equ	CLKPCE	= 7 ; Clock Prescaler Change Enable
                                 
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0 ; Carry Flag
                                 .equ	SREG_Z	= 1 ; Zero Flag
                                 .equ	SREG_N	= 2 ; Negative Flag
                                 .equ	SREG_V	= 3 ; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4 ; Sign Bit
                                 .equ	SREG_H	= 5 ; Half Carry Flag
                                 .equ	SREG_T	= 6 ; Bit Copy Storage
                                 .equ	SREG_I	= 7 ; Global Interrupt Enable
                                 
                                 ; SP - Stack Pointer
                                 .equ	SPH0	= 0 ; Stack Pointer High Bit 8
                                 .equ	SPH1	= 1 ; Stack Pointer High Bit 9
                                 .equ	SPH2	= 2 ; Stack Pointer High Bit 10
                                 .equ	SPH3	= 3 ; Stack Pointer High Bit 11
                                 
                                 .equ	SPL0	= 0 ; Stack Pointer Low Bit 0
                                 .equ	SPL1	= 1 ; Stack Pointer Low Bit 1
                                 .equ	SPL2	= 2 ; Stack Pointer Low Bit 2
                                 .equ	SPL3	= 3 ; Stack Pointer Low Bit 3
                                 .equ	SPL4	= 4 ; Stack Pointer Low Bit 4
                                 .equ	SPL5	= 5 ; Stack Pointer Low Bit 5
                                 .equ	SPL6	= 6 ; Stack Pointer Low Bit 6
                                 .equ	SPL7	= 7 ; Stack Pointer Low Bit 7
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ	SPMEN	= 0 ; Store Program Memory
                                 .equ	PGERS	= 1 ; Page Erase
                                 .equ	PGWRT	= 2 ; Page Write
                                 .equ	BLBSET	= 3 ; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4 ; Read-While-Write section read enable
                                 .equ	SIGRD	= 5 ; Signature Row Read
                                 .equ	RWWSB	= 6 ; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7 ; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0 ; 
                                 .equ	IVSEL	= 1 ; 
                                 .equ	PUD	= 4 ; 
                                 .equ	BODSE	= 5 ; BOD Sleep Enable
                                 .equ	BODS	= 6 ; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0 ; Power-on reset flag
                                 .equ	EXTRF	= 1 ; External Reset Flag
                                 .equ	BORF	= 2 ; Brown-out Reset Flag
                                 .equ	WDRF	= 3 ; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0 ; Sleep Enable
                                 .equ	SM0	= 1 ; Sleep Mode Select Bits
                                 .equ	SM1	= 2 ; Sleep Mode Select Bits
                                 .equ	SM2	= 3 ; Sleep Mode Select Bits
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0 ; General Purpose I/O Register 2 Bit 0
                                 .equ	GPIOR21	= 1 ; General Purpose I/O Register 2 Bit 1
                                 .equ	GPIOR22	= 2 ; General Purpose I/O Register 2 Bit 2
                                 .equ	GPIOR23	= 3 ; General Purpose I/O Register 2 Bit 3
                                 .equ	GPIOR24	= 4 ; General Purpose I/O Register 2 Bit 4
                                 .equ	GPIOR25	= 5 ; General Purpose I/O Register 2 Bit 5
                                 .equ	GPIOR26	= 6 ; General Purpose I/O Register 2 Bit 6
                                 .equ	GPIOR27	= 7 ; General Purpose I/O Register 2 Bit 7
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0 ; General Purpose I/O Register 1 Bit 0
                                 .equ	GPIOR11	= 1 ; General Purpose I/O Register 1 Bit 1
                                 .equ	GPIOR12	= 2 ; General Purpose I/O Register 1 Bit 2
                                 .equ	GPIOR13	= 3 ; General Purpose I/O Register 1 Bit 3
                                 .equ	GPIOR14	= 4 ; General Purpose I/O Register 1 Bit 4
                                 .equ	GPIOR15	= 5 ; General Purpose I/O Register 1 Bit 5
                                 .equ	GPIOR16	= 6 ; General Purpose I/O Register 1 Bit 6
                                 .equ	GPIOR17	= 7 ; General Purpose I/O Register 1 Bit 7
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0 ; General Purpose I/O Register 0 Bit 0
                                 .equ	GPIOR01	= 1 ; General Purpose I/O Register 0 Bit 1
                                 .equ	GPIOR02	= 2 ; General Purpose I/O Register 0 Bit 2
                                 .equ	GPIOR03	= 3 ; General Purpose I/O Register 0 Bit 3
                                 .equ	GPIOR04	= 4 ; General Purpose I/O Register 0 Bit 4
                                 .equ	GPIOR05	= 5 ; General Purpose I/O Register 0 Bit 5
                                 .equ	GPIOR06	= 6 ; General Purpose I/O Register 0 Bit 6
                                 .equ	GPIOR07	= 7 ; General Purpose I/O Register 0 Bit 7
                                 
                                 
                                 ; ***** EEPROM *****************
                                 ; EEAR - EEPROM Address Register Bytes
                                 .equ	EEARH0	= 0 ; EEPROM Address Register Bytes High Bit 8
                                 .equ	EEARH1	= 1 ; EEPROM Address Register Bytes High Bit 9
                                 
                                 .equ	EEARL0	= 0 ; EEPROM Address Register Bytes Low Bit 0
                                 .equ	EEARL1	= 1 ; EEPROM Address Register Bytes Low Bit 1
                                 .equ	EEARL2	= 2 ; EEPROM Address Register Bytes Low Bit 2
                                 .equ	EEARL3	= 3 ; EEPROM Address Register Bytes Low Bit 3
                                 .equ	EEARL4	= 4 ; EEPROM Address Register Bytes Low Bit 4
                                 .equ	EEARL5	= 5 ; EEPROM Address Register Bytes Low Bit 5
                                 .equ	EEARL6	= 6 ; EEPROM Address Register Bytes Low Bit 6
                                 .equ	EEARL7	= 7 ; EEPROM Address Register Bytes Low Bit 7
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0 ; EEPROM Data Register Bit 0
                                 .equ	EEDR1	= 1 ; EEPROM Data Register Bit 1
                                 .equ	EEDR2	= 2 ; EEPROM Data Register Bit 2
                                 .equ	EEDR3	= 3 ; EEPROM Data Register Bit 3
                                 .equ	EEDR4	= 4 ; EEPROM Data Register Bit 4
                                 .equ	EEDR5	= 5 ; EEPROM Data Register Bit 5
                                 .equ	EEDR6	= 6 ; EEPROM Data Register Bit 6
                                 .equ	EEDR7	= 7 ; EEPROM Data Register Bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0 ; EEPROM Read Enable
                                 .equ	EEPE	= 1 ; EEPROM Write Enable
                                 .equ	EEMPE	= 2 ; EEPROM Master Write Enable
                                 .equ	EERIE	= 3 ; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4 ; EEPROM Programming Mode Bits
                                 .equ	EEPM1	= 5 ; EEPROM Programming Mode Bits
                                 
                                 
                                 ; ***** FUSE *****************
                                 ; EXTENDED - 
                                 .equ	BODLEVEL0	= 0 ; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1 ; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2 ; Brown-out Detector trigger level
                                 .equ	CFD	= 3 ; Clock Failure Detection
                                 
                                 ; HIGH - 
                                 .equ	BOOTRST	= 0 ; Boot Reset vector Enabled
                                 .equ	BOOTSZ0	= 1 ; Select boot size
                                 .equ	BOOTSZ1	= 2 ; Select boot size
                                 .equ	EESAVE	= 3 ; Preserve EEPROM through the Chip Erase cycle
                                 .equ	WDTON	= 4 ; Watch-dog Timer always on
                                 .equ	SPIEN	= 5 ; Serial program downloading (SPI) enabled
                                 .equ	DWEN	= 6 ; Debug Wire enable
                                 .equ	RSTDISBL	= 7 ; Reset Disabled (Enable PC6 as i/o pin)
                                 
                                 ; LOW - 
                                 .equ	SUT_CKSEL0	= 0 ; Select Clock Source
                                 .equ	SUT_CKSEL1	= 1 ; Select Clock Source
                                 .equ	SUT_CKSEL2	= 2 ; Select Clock Source
                                 .equ	SUT_CKSEL3	= 3 ; Select Clock Source
                                 .equ	SUT_CKSEL4	= 4 ; Select Clock Source
                                 .equ	SUT_CKSEL5	= 5 ; Select Clock Source
                                 .equ	CKOUT	= 6 ; Clock output on PORTB0
                                 .equ	CKDIV8	= 7 ; Divide clock by 8 internally
                                 
                                 
                                 ; ***** LOCKBIT *****************
                                 ; LOCKBIT - 
                                 .equ	LB1	= 0 ; Memory Lock
                                 .equ	LB2	= 1 ; Memory Lock
                                 .equ	BLB01	= 2 ; Boot Loader Protection Mode
                                 .equ	BLB02	= 3 ; Boot Loader Protection Mode
                                 .equ	BLB11	= 4 ; Boot Loader Protection Mode
                                 .equ	BLB12	= 5 ; Boot Loader Protection Mode
                                 
                                 
                                 ; ***** CFD *****************
                                 ; XFDCSR - XOSC Failure Detection Control and Status Register
                                 .equ	XFDIE	= 0 ; Failure Detection Interrupt Enable
                                 .equ	XFDIF	= 1 ; Failure Detection Interrupt Flag
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHSTART	= 0x0000 ; Note: Word address
                                 .equ	FLASHEND	= 0x3FFF ; Note: Word address
                                 .equ	FLASHPAGESIZE	= 0x0080 ;
                                 
                                 .equ	BOOTSECTION1START	= 0x3F00 ; Note: Word address
                                 .equ	BOOTSECTION1END	= 0x3FFF ; Note: Word address
                                 .equ	BOOTSECTION1PAGESIZE	= 0x0080 ;
                                 
                                 .equ	BOOTSECTION2START	= 0x3E00 ; Note: Word address
                                 .equ	BOOTSECTION2END	= 0x3FFF ; Note: Word address
                                 .equ	BOOTSECTION2PAGESIZE	= 0x0080 ;
                                 
                                 .equ	BOOTSECTION3START	= 0x3C00 ; Note: Word address
                                 .equ	BOOTSECTION3END	= 0x3FFF ; Note: Word address
                                 .equ	BOOTSECTION3PAGESIZE	= 0x0080 ;
                                 
                                 .equ	BOOTSECTION4START	= 0x3800 ; Note: Word address
                                 .equ	BOOTSECTION4END	= 0x3FFF ; Note: Word address
                                 .equ	BOOTSECTION4PAGESIZE	= 0x0080 ;
                                 
                                 .equ	IOEND	= 0x00FF
                                 
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08FF
                                 
                                 .equ	E2END	= 0x03FF
                                 .equ	EEPROMEND	= 0x03FF
                                 .equ	EEADRBITS	= 10
                                 
                                 .equ	XRAMEND	= 0x0000
                                 
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	PAGESIZE	= 0x0080 ;
                                 
                                 .equ	FIRSTBOOTSTART	= 0x7E00 ; Note: Word address
                                 .equ	FIRSTBOOTPAGESIZE	= 0x0080 ;
                                 .equ	FIRSTBOOTEND	= 0x0000 ; Note: Word address
                                 
                                 .equ	SECONDBOOTSTART	= 0x7C00 ; Note: Word address
                                 .equ	SECONDBOOTPAGESIZE	= 0x0080 ;
                                 .equ	SECONDBOOTEND	= 0x0000 ; Note: Word address
                                 
                                 .equ	THIRDBOOTSTART	= 0x7800 ; Note: Word address
                                 .equ	THIRDBOOTPAGESIZE	= 0x0080 ;
                                 .equ	THIRDBOOTEND	= 0x0000 ; Note: Word address
                                 
                                 .equ	FOURTHBOOTSTART	= 0x7000 ; Note: Word address
                                 .equ	FOURTHBOOTPAGESIZE	= 0x0080 ;
                                 .equ	FOURTHBOOTEND	= 0x0000 ; Note: Word address
                                 
                                 .equ	 SMALLBOOTSTART	= FIRSTBOOTSTART ;
                                 .equ	 LARGEBOOTSTART	= FOURTHBOOTSTART ;
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	 = 0x0002 ; External Interrupt Request 0
                                 .equ	INT1addr	 = 0x0004 ; External Interrupt Request 1
                                 .equ	PCINT0addr	 = 0x0006 ; Pin Change Interrupt Request 0
                                 .equ	PCINT1addr	 = 0x0008 ; Pin Change Interrupt Request 1
                                 .equ	PCINT2addr	 = 0x000A ; Pin Change Interrupt Request 2
                                 .equ	WDTaddr	 = 0x000C ; Watchdog Time-out Interrupt
                                 .equ	TIMER2_COMPAaddr	 = 0x000E ; Timer/Counter2 Compare Match A
                                 .equ	TIMER2_COMPBaddr	 = 0x0010 ; Timer/Counter2 Compare Match B
                                 .equ	TIMER2_OVFaddr	 = 0x0012 ; Timer/Counter2 Overflow
                                 .equ	TIMER1_CAPTaddr	 = 0x0014 ; Timer/Counter1 Capture Event
                                 .equ	TIMER1_COMPAaddr	 = 0x0016 ; Timer/Counter1 Compare Match A
                                 .equ	TIMER1_COMPBaddr	 = 0x0018 ; Timer/Counter1 Compare Match B
                                 .equ	TIMER1_OVFaddr	 = 0x001A ; Timer/Counter1 Overflow
                                 .equ	TIMER0_COMPAaddr	 = 0x001C ; TimerCounter0 Compare Match A
                                 .equ	TIMER0_COMPBaddr	 = 0x001E ; TimerCounter0 Compare Match B
                                 .equ	TIMER0_OVFaddr	 = 0x0020 ; Timer/Couner0 Overflow
                                 .equ	SPI0_STCaddr	 = 0x0022 ; SPI Serial Transfer Complete
                                 .equ	USART0_RXaddr	 = 0x0024 ; USART0 Rx Complete
                                 .equ	USART0_UDREaddr	 = 0x0026 ; USART0, Data Register Empty
                                 .equ	USART0_TXaddr	 = 0x0028 ; USART0 Tx Complete
                                 .equ	ADCaddr	 = 0x002A ; ADC Conversion Complete
                                 .equ	EE_READYaddr	 = 0x002C ; EEPROM Ready
                                 .equ	ANALOG_COMPaddr	 = 0x002E ; Analog Comparator
                                 .equ	TWI0addr	 = 0x0030 ; Two-wire Serial Interface
                                 .equ	SPM_Readyaddr	 = 0x0032 ; Store Program Memory Read
                                 .equ	USART0_STARTaddr	 = 0x0034 ; USART0 Start frame detection
                                 .equ	PCINT3addr	 = 0x0036 ; Pin Change Interrupt Request 3
                                 .equ	USART1_RXaddr	 = 0x0038 ; USART1 Rx Complete
                                 .equ	USART1_UDREaddr	 = 0x003A ; USART1, Data Register Empty
                                 .equ	USART1_TXaddr	 = 0x003C ; USART1 Tx Complete
                                 .equ	USART1_STARTaddr	 = 0x003E ; USART1 Start frame detection
                                 .equ	TIMER3_CAPTaddr	 = 0x0040 ; Timer/Counter3 Capture Event
                                 .equ	TIMER3_COMPAaddr	 = 0x0042 ; Timer/Counter3 Compare Match A
                                 .equ	TIMER3_COMPBaddr	 = 0x0044 ; Timer/Counter3 Compare Match B
                                 .equ	TIMER3_OVFaddr	 = 0x0046 ; Timer/Counter3 Overflow
                                 .equ	CFDaddr	 = 0x0048 ; Clock failure detection interrupt
                                 .equ	PTC_EOCaddr	 = 0x004A ; PTC End of conversion
                                 .equ	PTC_WCOMPaddr	 = 0x004C ; PTC Window comparator mode
                                 .equ	SPI1_STCaddr	 = 0x004E ; SPI1 Serial Transfer Complete
                                 .equ	TWI1addr	 = 0x0050 ; TWI Transfer Complete
                                 .equ	TIMER4_CAPTaddr	 = 0x0052 ; Timer/Counter4 Capture Event
                                 .equ	TIMER4_COMPAaddr	 = 0x0054 ; Timer/Counter4 Compare Match A
                                 .equ	TIMER4_COMPBaddr	 = 0x0056 ; Timer/Counter4 Compare Match B
                                 .equ	TIMER4_OVFaddr	 = 0x0058 ; Timer/Counter4 Overflow
                                 
                                 .equ	INT_VECTORS_SIZE	= 90 ; size in words
                                 
                                 #endif /* _M328PBDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 
                                 
                                 
                                 ; Author : Zijie Yu
                                 
                                 ; (Use ADC interrupt version)
                                 
                                 
                                 
                                 .macro	set_pointer
                                 	ldi	@0, low(@2<<1)
                                 	ldi	@1, high(@2<<1)
                                 .endmacro
                                 .cseg
                                 .def	io_setup	= r16
                                 .def	reg_workhorse	= r17
                                 .def			adc_value_low	= r20					
                                 .def			adc_value_high	= r21   				
                                 .org			0x0000									
000000 c0ff                      				rjmp		setup	
                                 .org			0x002A	
00002a c0ed                      				rjmp		isr_conversion
                                 .org			0x0100									
                                 ; ---------------- setup sequence ----------------
000100 ef0f                      setup:			ldi			io_setup, 0xFF				
000101 b904                      				out			DDRB, io_setup				
000102 b90a                      				out			DDRD, io_setup									
000103 e412                      				ldi			reg_workhorse, 0b01000010	
000104 9310 007c                 				sts			ADMUX, reg_workhorse		
000106 ec1f                      				ldi			reg_workhorse,0b11001111
000107 9310 007a                 				sts			ADCSRA,reg_workhorse
000109 9478                      				sei			
                                 ;setup_OLED
00010a d07b                      				rcall	OLED_initialize
00010b d511                      				rcall	GFX_clear_array
                                 	
00010c e1a0
00010d e0b2                      				set_pointer	XL, XH, pixel_array
00010e d0a8                      				rcall	OLED_refresh_screen
                                 ;------------------Loop-----------------------------
                                 cp_loop:
00010f 3644                      	cpi adc_value_low,100
000110 f030                      	brlo loop3 ; Wear more clothes
000111 d000                      	rcall jumpLoop
                                 
                                 	jumpLoop:
000112 3649                      	cpi adc_value_low,105
000113 f010                      	brlo loop2 ;perfect
000114 d000                      	rcall loop1 ;too hot
                                 
                                 	loop1:
000115 d517                      	rcall char_loop1
                                 	loop2:
000116 d548                      	rcall char_loop2
                                 	loop3:
000117 d57d                      	rcall char_loop3
                                 
                                 isr_conversion:		 
000118 9140 0078                 lds adc_value_low, ADCL 
00011a 9150 0079                 lds adc_value_high,ADCH   
00011c 0f55                      lsl adc_value_high
00011d 0f55                      lsl adc_value_high
00011e 0f55                      lsl adc_value_high
00011f 0f55                      lsl adc_value_high
000120 0f55                      lsl adc_value_high
000121 0f55                      lsl adc_value_high
                                 
000122 9546                      lsr adc_value_low
000123 9546                      lsr adc_value_low
000124 e31f                      ldi reg_workhorse,0b00111111
000125 2341                      and adc_value_low,reg_workhorse
000126 2b45                      or  adc_value_low,adc_value_high
000127 9518                      reti
                                 
                                 .include	"lib_delay.asm"
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; lib_delay
                                 ; All delays generated by delay loop calculator at http://www.bretmulvey.com/avrdelay.html
                                 ; --------------------------------------------------------------------------------
                                 ; --------------------------------------------------------------------------------
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Delay 15 999 984 cycles
                                 ; 999ms 999us at 16 MHz
                                 ; --------------------------------------------------------------------------------
                                 delay_1s:
000128 937f                                                  push            r23
000129 938f                                                  push            r24
00012a 939f                                                  push            r25
00012b e572                                                  ldi             r23, 82
00012c e28b                                                  ldi             r24, 43
00012d ef9c                                                  ldi             r25, 252
                                     delay_1s_cont:          
00012e 959a                                                  dec             r25
00012f f7f1                                                  brne            delay_1s_cont
000130 958a                                                  dec             r24
000131 f7e1                                                  brne            delay_1s_cont
000132 957a                                                  dec             r23
000133 f7d1                                                  brne            delay_1s_cont
000134 0000                                                  nop
000135 919f                                                  pop             r25
000136 918f                                                  pop             r24
000137 917f                                                  pop             r23
000138 9508                                                  ret
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Delay 1 599 984 cycles
                                 ; 99ms 999us at 16 MHz
                                 ; --------------------------------------------------------------------------------
                                 delay_100ms:
000139 937f                                                  push            r23
00013a 938f                                                  push            r24
00013b 939f                                                  push            r25
00013c e079                                                  ldi             r23, 9
00013d e18e                                                  ldi             r24, 30
00013e ee90                                                  ldi             r25, 224
                                     delay_100ms_cont:
00013f 959a                                                  dec             r25
000140 f7f1                                                  brne            delay_100ms_cont
000141 958a                                                  dec             r24
000142 f7e1                                                  brne            delay_100ms_cont
000143 957a                                                  dec             r23
000144 f7d1                                                  brne            delay_100ms_cont
000145 0000                                                  nop
000146 919f                                                  pop             r25
000147 918f                                                  pop             r24
000148 917f                                                  pop             r23
000149 9508                                                  ret
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Delay 159 988 cycles
                                 ; 9ms 999us 250 ns at 16 MHz
                                 ; --------------------------------------------------------------------------------
                                 delay_10ms:
00014a 937f                                                  push            r23
00014b 938f                                                  push            r24
00014c ed70                                                  ldi             r23, 208
00014d ec86                                                  ldi             r24, 198
00014e 958a                          delay_10ms_cont:        dec             r24
00014f f7f1                                                  brne            delay_10ms_cont
000150 957a                                                  dec             r23
000151 f7e1                                                  brne            delay_10ms_cont
000152 0000                                                  nop
000153 918f                                                  pop             r24
000154 917f                                                  pop             r23
000155 9508                                                  ret
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Delay 15 988 cycles
                                 ; 999us 249 0/1 ns at 16 MHz
                                 ; --------------------------------------------------------------------------------
                                 delay_1ms:
000156 937f                                                  push            r23
000157 938f                                                  push            r24
000158 e175                                                  ldi             r23, 21
000159 ec83                                                  ldi             r24, 195
                                     delay_1ms_cont:
00015a 958a                                                  dec             r24
00015b f7f1                                                  brne            delay_1ms_cont
00015c 957a                                                  dec             r23
00015d f7e1                                                  brne            delay_1ms_cont
00015e 918f                                                  pop             r24
00015f 917f                                                  pop             r23
000160 9508                                                  ret
                                 
                                 ; --------------------------------------------------------------------------------
                                 .include	"lib_SSD1306_OLED.asm"
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; lib_SSD1306_OLED
                                 ; Description: basic control for Adafruit SSD1306 OLED screen (via SPI only).
                                 ; --------------------------------------------------------------------------------
                                 ; --------------------------------------------------------------------------------
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Description: directives
                                 ; --------------------------------------------------------------------------------
                                 .equ                        SPI_MOSI        = PORTB3 ; 11
                                 .equ                        SPI_MISO        = PORTB4 ; 12
                                 .equ                        SPI_CLK         = PORTB5 ; 13
                                 .equ                        OLED_RST        = PORTB1 ; 9
                                 .equ                        OLED_DC         = PORTB0 ; 8
                                 .equ                        OLED_CS         = PORTB2 ; 10
                                 
                                 .equ                        WIDTH           = 128                                   ; adjust your screen dimensions here
                                 .equ                        HEIGHT          = 64                                    ; "
                                 
                                 .include                    "lib_SPI.asm"                                           ; include SPI library
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; lib_SPI
                                 ; Description: control of SPI on ATMega328PB
                                 ; --------------------------------------------------------------------------------
                                 ; --------------------------------------------------------------------------------
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Description: initializes SPI device as master
                                 ; subroutine type:
                                 ;   - PUBLIC
                                 ; dependencies:
                                 ;   - none
                                 ; --------------------------------------------------------------------------------
                                 SPI_master_initialize:
000161 e500                                                  ldi             r16, (1<<SPE)|(1<<MSTR)                 ; enable SPI to master mode, disable interrupt, set shift
000162 bd0c                                                  out             SPCR0, r16                              ; rate to 4 MHz, shift data on rising edge, MSB first, SCK idle low
000163 b50d                                                  in              r16, SPSR0                              ; clear flags and disable double baud rate
000164 b50e                                                  in              r16, SPDR0                              ; "
000165 e000                                                  ldi             r16, 0                                  ; clear SPI2X bit
000166 bd0d                                                  out             SPSR0, r16                              ; "
000167 9508                                                  ret
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Description: initializes SPI devies as slave
                                 ; subroutine type:
                                 ;   - PUBLIC
                                 ; dependencies:
                                 ;   - none
                                 ; --------------------------------------------------------------------------------
                                 SPI_slave_initialize:
000168 e400                                                  ldi             r16, (1<<SPE)|(0<<MSTR)                 ; enable SPI to slave mode, disable interrupt, set shift
000169 bd0c                                                  out             SPCR0, r16                              ; rate to 4 MHz, shift data on rising edge, MSB first, SCK idle low
00016a b50d                                                  in              r16, SPSR0                              ; clear flags and disable double baud rate
00016b b50e                                                  in              r16, SPDR0                              ; "
00016c e000                                                  ldi             r16, 0                                  ; clear SPI2X bit
00016d bd0d                                                  out             SPSR0, r16                              ; "
00016e 9508                                                  ret
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Description: sends a byte of information from the master
                                 ; subroutine type:
                                 ;   - PUBLIC
                                 ; dependencies:
                                 ;   - r17: byte to be sent
                                 ; --------------------------------------------------------------------------------
                                 SPI_master_transmit:
00016f bd1e                                                  out             SPDR0, r17                              ; Start transmission of data
                                     SPI_master_transmit_wait:
000170 b50d                                                  in              r16, SPSR0
000171 ff07                                                  sbrs            r16, SPIF                               ; wait until SPIF is set
000172 cffd                                                  rjmp            SPI_master_transmit_wait                ; "
000173 b50e                                                  in              r16, SPDR0                              ; clear the SPIF flag
000174 9508                                                  ret
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Description: receives a byte of information from the slave (into r17)
                                 ; Subroutine type:
                                 ;   - PUBLIC
                                 ; Dependencies:
                                 ;   - none
                                 ; --------------------------------------------------------------------------------
                                 SPI_master_receive:
000175 bd0e                                                  out             SPDR0, r16                              ; Start transmission of data
                                     SPI_slave_receive_wait:
000176 b50d                                                  in              r16, SPSR0
000177 ff07                                                  sbrs            r16, SPIF                               ; wait until SPIF is set
000178 cffd                                                  rjmp            SPI_slave_receive_wait                  ; "
000179 b51e                                                  in              r17, SPDR0                              ; fetch data and clear SPIF flag
00017a 9508                                                  ret
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Description: sends a byte of infomation from the slave
                                 ; Subroutine type:
                                 ;   - PUBLIC
                                 ; Dependencies:
                                 ;   - r17: byte to be sent
                                 ; --------------------------------------------------------------------------------
                                 SPI_slave_transmit:
00017b bd1e                                                  out             SPDR0, r17                              ; Start transmission of data
                                     SPI_slave_transmit_wait:
00017c b50d                                                  in              r16, SPSR0
00017d ff07                                                  sbrs            r16, SPIF                               ; wait until SPIF is set
00017e cffd                                                  rjmp            SPI_slave_transmit_wait                 ; "
00017f b50e                                                  in              r16, SPDR0                              ; clear the SPIF flag
000180 9508                                                  ret
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Description: receives a byte of infomation from the master (into r17)
                                 ; Subroutine type:
                                 ;   - PUBLIC
                                 ; Dependencies:
                                 ;   - none
                                 ; --------------------------------------------------------------------------------
                                 SPI_slave_receive:
000181 b50d                                                  in              r16, SPSR0
000182 ff07                                                  sbrs            r16, SPIF                               ; wait until SPIF is set
000183 cffd                                                  rjmp            SPI_slave_receive                       ; "
000184 b51e                                                  in              r17, SPDR0                              ; clear the SPIF flag
000185 9508                                                  ret
                                 
                                 ; --------------------------------------------------------------------------------
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Description: initialises OLED screen.
                                 ; Subroutine type:
                                 ;   - PUBLIC
                                 ; Dependencies:
                                 ;   - none
                                 ; --------------------------------------------------------------------------------
                                 OLED_initialize:
000186 dfda                                                  rcall           SPI_master_initialize
000187 e20f                                                  ldi             r16, (1<<SPI_MOSI)|(1<<SPI_CLK)|(1<<OLED_RST)|(1<<OLED_DC)|(1<<OLED_CS)
000188 b904                                                  out             DDRB, r16
000189 e000                                                  ldi             r16, 0
00018a b905                                                  out             PORTB, r16
                                                             
00018b 9a29                                                  sbi             PORTB, OLED_RST
00018c dfc9                                                  rcall           delay_1ms
00018d 9829                                                  cbi             PORTB, OLED_RST
00018e dfc7                                                  rcall           delay_1ms
00018f 9a29                                                  sbi             PORTB, OLED_RST
000190 dfc5                                                  rcall           delay_1ms
000191 e9e2                                                  ldi             ZL, low(array_OLED_init_commands<<1)
000192 e0f3                                                  ldi             ZH, high(array_OLED_init_commands<<1)
                                     OLED_init_cmds:
000193 9115                                                  lpm             r17, Z+
000194 3f1f                                                  cpi             r17, 0xFF
000195 f011                                                  breq            OLED_init_end
000196 d002                                                  rcall           _OLED_write_command
000197 cffb                                                  rjmp            OLED_init_cmds
                                     OLED_init_end:
000198 9508                                                  ret
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Description: writes a command to one of the screen's registers.
                                 ; Subroutine type:
                                 ;   - PRIVATE
                                 ; Dependencies:
                                 ;   - r17: command
                                 ; --------------------------------------------------------------------------------
                                 _OLED_write_command:
000199 982a                                                  cbi             PORTB, OLED_CS
00019a 9828                                                  cbi             PORTB, OLED_DC
00019b dfd3                                                  rcall           SPI_master_transmit
00019c 9a2a                                                  sbi             PORTB, OLED_CS
00019d 9508                                                  ret
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Description: writes a byte of data to one of the screen's registers.
                                 ; Subroutine type:
                                 ;   - PRIVATE
                                 ; Dependencies:
                                 ;   - r17: data
                                 ; --------------------------------------------------------------------------------
                                 _OLED_write_data:
00019e 982a                                                  cbi             PORTB, OLED_CS
00019f 9a28                                                  sbi             PORTB, OLED_DC
0001a0 dfce                                                  rcall           SPI_master_transmit
0001a1 9a2a                                                  sbi             PORTB, OLED_CS
0001a2 9508                                                  ret
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Description: sets target x-y location on OLED.
                                 ; Subroutine type:
                                 ;   - PRIVATE
                                 ; Dependencies:
                                 ;   - r18: pixel grid x position [subroutine does not change]
                                 ;   - r19: pixel grid y position [subroutine does not change]
                                 ; (this may be deprecateed)
                                 ; --------------------------------------------------------------------------------
                                 _OLED_set_screen_loc:
0001a3 d009                                                  rcall           _OLED_set_page
0001a4 d001                                                  rcall           _OLED_set_col
0001a5 9508                                                  ret
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Description: sets target column.
                                 ; Subroutine type:
                                 ;   - PRIVATE
                                 ; Dependencies:
                                 ;   - r18: pixel grid x position [subroutine does not change]
                                 ; (this may be deprecateed)
                                 ; --------------------------------------------------------------------------------
                                 _OLED_set_col:               
0001a6 e211                                                  ldi             r17, 0x21
0001a7 dff1                                                  rcall           _OLED_write_command
0001a8 2f12                                                  mov             r17, r18
0001a9 dfef                                                  rcall           _OLED_write_command
0001aa e71f                                                  ldi             r17, WIDTH-1
0001ab dfed                                                  rcall           _OLED_write_command
0001ac 9508                                                  ret
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Description: sets target page.
                                 ; Subroutine type:
                                 ;   - PRIVATE
                                 ; Dependencies:
                                 ;   - r17: command
                                 ;   - r19: pixel grid y position [subroutine does not change]
                                 ; (this may be deprecateed)
                                 ; --------------------------------------------------------------------------------
                                 _OLED_set_page:
0001ad e212                                                  ldi             r17, 0x22
0001ae dfea                                                  rcall           _OLED_write_command
0001af 9536                                                  lsr             r19
0001b0 9536                                                  lsr             r19
0001b1 9536                                                  lsr             r19
0001b2 2f13                                                  mov             r17, r19
0001b3 dfe5                                                  rcall           _OLED_write_command
0001b4 e017                                                  ldi             r17, (HEIGHT-1)/8
0001b5 dfe3                                                  rcall           _OLED_write_command
0001b6 9508                                                  ret
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Description: writes the entire pix array from dmem to OLED.
                                 ; Subroutine type:
                                 ;   - PUBLIC
                                 ; Dependencies:
                                 ;   - X pointer: set to start of array location
                                 ; --------------------------------------------------------------------------------
                                 OLED_refresh_screen:
0001b7 932f                                                  push            r18
0001b8 933f                                                  push            r19
0001b9 2722                                                  clr             r18
0001ba 2733                                                  clr             r19
                                     OLED_refresh_screen_col:                                                        ; for each col
0001bb 3038                                                  cpi             r19, HEIGHT/8
0001bc f448                                                  brcc            OLED_refresh_screen_done
                                         OLED_refresh_screen_row:                                                    ; for each row
0001bd 3820                                                  cpi             r18, WIDTH
0001be f420                                                  brcc            OLED_refresh_screen_nr
0001bf 911d                                                  ld              r17, X+
0001c0 dfdd                                                  rcall           _OLED_write_data
0001c1 9523                                                  inc             r18
0001c2 cffa                                                  rjmp            OLED_refresh_screen_row
                                             OLED_refresh_screen_nr:                                                 ; move to next row
0001c3 2722                                                  clr             r18
0001c4 9533                                                  inc             r19
0001c5 cff5                                                  rjmp            OLED_refresh_screen_col
                                     OLED_refresh_screen_done:                                                       ; done drawing array
0001c6 913f                                                  pop             r19
0001c7 912f                                                  pop             r18
0001c8 9508                                                  ret
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Description: initialisation sequence for screen.
                                 ; Nicked from https://github.com/adafruit/Adafruit_SSD1306/blob/master/Adafruit_SSD1306.cpp
                                 ; (Starts on line 543.)
                                 ; Comments below are on separate lines because Atmel Studio doesn't like inline comments on continued lines.
                                 ; --------------------------------------------------------------------------------
                                 array_OLED_init_commands:   .db         0xAE, \
0001c9 d5ae                                                              0xD5, 0x80, \
0001ca a880                                                              0xA8, 0x3F, \
0001cb d33f                                                              0xD3, 0x00, \
                                                                         0x40, \
0001cc 4000                                                              0x8D, 0x14, \
0001cd 148d                                                              0x20, 0x00, \
0001ce 0020                                                              0xA1, \
                                                                         0xC8, \
0001cf c8a1                                                              0xDA, 0x12, \
0001d0 12da                                                              0x81, 0xCF, \
0001d1 cf81                                                              0xD9, 0xF1, \
0001d2 f1d9                                                              0xDB, 0x40, \
0001d3 40db                                                              0xA4, \
                                                                         0xA6, \
0001d4 a6a4                                                              0x2E, \
                                                                         0xAF, \
0001d5 af2e
0001d6 ffff                                                              0xFF, 0xFF
                                 
                                                                         ; set disp (off),
                                                                         ; set disp clock div rat/osc freq
                                                                         ; set mux ratio
                                                                         ; set disp offset
                                                                         ; set disp start line (0)
                                                                         ; enable charge pump reg
                                                                         ; set mem addr mode - horiz
                                                                         ; set seg remap (remapped)
                                                                         ; set COM out scan dir (remapped)
                                                                         ; set com pins hw config
                                                                         ; set contrast ctrl
                                                                         ; set prechrg per
                                                                         ; set Vcom reg out
                                                                         ; entire disp (on)
                                                                         ; set inverse/normal (norm)
                                                                         ; deactivate scroll (deactivate)
                                                                         ; set disp (on)
                                                                         ; END COMMAND SET (my marker)
                                 
                                 ; --------------------------------------------------------------------------------
                                 .include	"lib_GFX.asm"
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; lib_GFX
                                 ; Description: controls higher-level functionaity for OLED screens.
                                 ; Dependencies:
                                 ;   - HEIGHT .equ (the height of the OLED screen), assigned in main.asm
                                 ;   - WIDTH .equ (the width of the OLED screen), assigned in main.asm
                                 ; --------------------------------------------------------------------------------
                                 ; --------------------------------------------------------------------------------
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Description: reserved space in data memory for pixel array (full screen) and.
                                 ;              sprite array (one 8pixel x 8pixel character)
                                 ; --------------------------------------------------------------------------------
                                 .dseg
000100                           sprite:                     .byte           8                                       ; 8x8 pixel shape used to store sprite
000108                           pixel_array:                .byte           HEIGHT*WIDTH/8                          ; datamem array that is written to screen
                                 .cseg                                                                               ; return to code segment
                                 .include                    "character_map.asm"                                       ; table of ascii pixel char arrays
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; character_map.asm
                                 ; Font: Standard.pf
                                 ; tool to generate this file from https://www.min.at/prinz/o/software/pixelfont/
                                 ; --------------------------------------------------------------------------------
                                 ; --------------------------------------------------------------------------------
0001d7 0000
0001d8 0000
0001d9 0000
0001da 0000                      Char_000:                   .db             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00  ; space
0001db 817e
0001dc b195
0001dd 95b1
0001de 7e81                      Char_001:                   .db             0x7E, 0x81, 0x95, 0xB1, 0xB1, 0x95, 0x81, 0x7E  ; smileyface
0001df ff7e
0001e0 cfeb
0001e1 ebcf
0001e2 7eff                      Char_002:                   .db             0x7E, 0xFF, 0xEB, 0xCF, 0xCF, 0xEB, 0xFF, 0x7E  ; smileyface (inverted)
0001e3 1f0e
0001e4 7e3f
0001e5 1f3f
0001e6 000e                      Char_003:                   .db             0x0E, 0x1F, 0x3F, 0x7E, 0x3F, 0x1F, 0x0E, 0x00  ; hearts
0001e7 1c08
0001e8 7f3e
0001e9 1c3e
0001ea 0008                      Char_004:                   .db             0x08, 0x1C, 0x3E, 0x7F, 0x3E, 0x1C, 0x08, 0x00  ; diamonds
0001eb 1818
0001ec 6f5b
0001ed 5b6f
0001ee 1818                      Char_005:                   .db             0x18, 0x18, 0x5B, 0x6F, 0x6F, 0x5B, 0x18, 0x18  ; clubs
0001ef 1c18
0001f0 6f5e
0001f1 1c5e
0001f2 0018                      Char_006:                   .db             0x18, 0x1C, 0x5E, 0x6F, 0x5E, 0x1C, 0x18, 0x00  ; spades
0001f3 0000
0001f4 3c18
0001f5 183c
0001f6 0000                      Char_007:                   .db             0x00, 0x00, 0x18, 0x3C, 0x3C, 0x18, 0x00, 0x00  ; circle, black
0001f7 ffff
0001f8 c3e7
0001f9 e7c3
0001fa ffff                      Char_008:                   .db             0xFF, 0xFF, 0xE7, 0xC3, 0xC3, 0xE7, 0xFF, 0xFF  ; circle, black (inverted)
0001fb 3c00
0001fc 4266
0001fd 6642
0001fe 003c                      Char_009:                   .db             0x00, 0x3C, 0x66, 0x42, 0x42, 0x66, 0x3C, 0x00  ; circle, white
0001ff c3ff
000200 bd99
000201 99bd
000202 ffc3                      Char_010:                   .db             0xFF, 0xC3, 0x99, 0xBD, 0xBD, 0x99, 0xC3, 0xFF  ; circle, white (inverted)
000203 f870
000204 8888
000205 7ffd
000206 0f07                      Char_011:                   .db             0x70, 0xF8, 0x88, 0x88, 0xFD, 0x7F, 0x07, 0x0F  ; male symbol
000207 4e00
000208 f15f
000209 5ff1
00020a 004e                      Char_012:                   .db             0x00, 0x4E, 0x5F, 0xF1, 0xF1, 0x5F, 0x4E, 0x00  ; female symbol
00020b 6040
00020c 6060
00020d 023f
00020e 000c                      Char_013:                   .db             0x40, 0x60, 0x60, 0x60, 0x3F, 0x02, 0x0C, 0x00  ; eighth note
00020f 3020
000210 9f30
000211 cac5
000212 007c                      Char_014:                   .db             0x20, 0x30, 0x30, 0x9F, 0xC5, 0xCA, 0x7C, 0x00  ; double sixteenth note
000213 2a08
000214 771c
000215 2a1c
000216 0008                      Char_015:                   .db             0x08, 0x2A, 0x1C, 0x77, 0x1C, 0x2A, 0x08, 0x00  ; asterisk
000217 3e7f
000218 1c3e
000219 081c
00021a 0008                      Char_016:                   .db             0x7F, 0x3E, 0x3E, 0x1C, 0x1C, 0x08, 0x08, 0x00  ; triangle, right
00021b 0808
00021c 1c1c
00021d 3e3e
00021e 007f                      Char_017:                   .db             0x08, 0x08, 0x1C, 0x1C, 0x3E, 0x3E, 0x7F, 0x00  ; triange, left
00021f 1400
000220 7f22
000221 227f
000222 0014                      Char_018:                   .db             0x00, 0x14, 0x22, 0x7F, 0x7F, 0x22, 0x14, 0x00  ; arrow, up/down
000223 5f00
000224 005f
000225 5f00
000226 005f                      Char_019:                   .db             0x00, 0x5F, 0x5F, 0x00, 0x00, 0x5F, 0x5F, 0x00  ; double exclamation point
000227 1f0e
000228 7f11
000229 017f
00022a 7f7f                      Char_020:                   .db             0x0E, 0x1F, 0x11, 0x7F, 0x7F, 0x01, 0x7F, 0x7F  ; pilcrow sign
00022b 9840
00022c a5a6
00022d 1965
00022e 0002                      Char_021:                   .db             0x40, 0x98, 0xA6, 0xA5, 0x65, 0x19, 0x02, 0x00  ; section sign
00022f 7000
000230 7070
000231 7070
000232 0070                      Char_022:                   .db             0x00, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x00  ; heavy low dash
000233 9400
000234 ffa2
000235 a2ff
000236 0094                      Char_023:                   .db             0x00, 0x94, 0xA2, 0xFF, 0xFF, 0xA2, 0x94, 0x00  ; arrow, up/down with underscore
000237 0400
000238 7f02
000239 027f
00023a 0004                      Char_024:                   .db             0x00, 0x04, 0x02, 0x7F, 0x7F, 0x02, 0x04, 0x00  ; arrow, up
00023b 1000
00023c 7f20
00023d 207f
00023e 0010                      Char_025:                   .db             0x00, 0x10, 0x20, 0x7F, 0x7F, 0x20, 0x10, 0x00  ; arrow, down
00023f 0808
000240 2a08
000241 1c3e
000242 0008                      Char_026:                   .db             0x08, 0x08, 0x08, 0x2A, 0x3E, 0x1C, 0x08, 0x00  ; arrow, right
000243 1c08
000244 2a3e
000245 0808
000246 0008                      Char_027:                   .db             0x08, 0x1C, 0x3E, 0x2A, 0x08, 0x08, 0x08, 0x00  ; arrow, left
000247 3c3c
000248 2020
000249 2020
00024a 0020                      Char_028:                   .db             0x3C, 0x3C, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00  ; righthand interior product
00024b 1c08
00024c 082a
00024d 2a08
00024e 081c                      Char_029:                   .db             0x08, 0x1C, 0x2A, 0x08, 0x08, 0x2A, 0x1C, 0x08  ; arrow, left/right
00024f 3830
000250 3e3c
000251 383c
000252 0030                      Char_030:                   .db             0x30, 0x38, 0x3C, 0x3E, 0x3C, 0x38, 0x30, 0x00  ; triangle, up
000253 0e06
000254 3e1e
000255 0e1e
000256 0006                      Char_031:                   .db             0x06, 0x0E, 0x1E, 0x3E, 0x1E, 0x0E, 0x06, 0x00  ; triangle, down
000257 0000
000258 0000
000259 0000
00025a 0000                      Char_032:                   .db             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00  ; space
00025b 0000
00025c 5f06
00025d 065f
00025e 0000                      Char_033:                   .db             0x00, 0x00, 0x06, 0x5F, 0x5F, 0x06, 0x00, 0x00  ; !
00025f 0100
000260 0007
000261 0701
000262 0000                      Char_034:                   .db             0x00, 0x01, 0x07, 0x00, 0x01, 0x07, 0x00, 0x00  ; "
000263 7f14
000264 147f
000265 7f7f
000266 0014                      Char_035:                   .db             0x14, 0x7F, 0x7F, 0x14, 0x7F, 0x7F, 0x14, 0x00  ; #
000267 2e24
000268 7f2a
000269 3a2a
00026a 0010                      Char_036:                   .db             0x24, 0x2E, 0x2A, 0x7F, 0x2A, 0x3A, 0x10, 0x00  ; $
00026b 6a4c
00026c 1836
00026d 566c
00026e 0032                      Char_037:                   .db             0x4C, 0x6A, 0x36, 0x18, 0x6C, 0x56, 0x32, 0x00  ; %
00026f 7a30
000270 4d4d
000271 327f
000272 0050                      Char_038:                   .db             0x30, 0x7A, 0x4D, 0x4D, 0x7F, 0x32, 0x50, 0x00  ; &
000273 0000
000274 0305
000275 0000
000276 0000                      Char_039:                   .db             0x00, 0x00, 0x05, 0x03, 0x00, 0x00, 0x00, 0x00  ; '
000277 1c00
000278 633e
000279 0041
00027a 0000                      Char_040:                   .db             0x00, 0x1C, 0x3E, 0x63, 0x41, 0x00, 0x00, 0x00  ; (
00027b 4100
00027c 3e63
00027d 001c
00027e 0000                      Char_041:                   .db             0x00, 0x41, 0x63, 0x3E, 0x1C, 0x00, 0x00, 0x00  ; )
00027f 2a08
000280 1c3e
000281 3e1c
000282 082a                      Char_042:                   .db             0x08, 0x2A, 0x3E, 0x1C, 0x1C, 0x3E, 0x2A, 0x08  ; *
000283 0808
000284 3e3e
000285 0808
000286 0000                      Char_043:                   .db             0x08, 0x08, 0x3E, 0x3E, 0x08, 0x08, 0x00, 0x00  ; +
000287 0000
000288 60a0
000289 0000
00028a 0000                      Char_044:                   .db             0x00, 0x00, 0xA0, 0x60, 0x00, 0x00, 0x00, 0x00  ; ,
00028b 0808
00028c 0808
00028d 0808
00028e 0000                      Char_045:                   .db             0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00  ; -
00028f 0000
000290 4040
000291 0000
000292 0000                      Char_046:                   .db             0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00  ; .
000293 6040
000294 1830
000295 060c
000296 0003                      Char_047:                   .db             0x40, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x03, 0x00  ; /
000297 7f3e
000298 4d79
000299 7f47
00029a 003e                      Char_048:                   .db             0x3E, 0x7F, 0x79, 0x4D, 0x47, 0x7F, 0x3E, 0x00  ; 0
00029b 4400
00029c 7f46
00029d 407f
00029e 0040                      Char_049:                   .db             0x00, 0x44, 0x46, 0x7F, 0x7F, 0x40, 0x40, 0x00  ; 1
00029f 7362
0002a0 5951
0002a1 6f49
0002a2 0066                      Char_050:                   .db             0x62, 0x73, 0x51, 0x59, 0x49, 0x6F, 0x66, 0x00  ; 2
0002a3 6322
0002a4 4949
0002a5 7f49
0002a6 0036                      Char_051:                   .db             0x22, 0x63, 0x49, 0x49, 0x49, 0x7F, 0x36, 0x00  ; 3
0002a7 1c18
0002a8 5316
0002a9 7f7f
0002aa 0050                      Char_052:                   .db             0x18, 0x1C, 0x16, 0x53, 0x7F, 0x7F, 0x50, 0x00  ; 4
0002ab 6727
0002ac 4545
0002ad 7d45
0002ae 0039                      Char_053:                   .db             0x27, 0x67, 0x45, 0x45, 0x45, 0x7D, 0x39, 0x00  ; 5
0002af 7f3e
0002b0 4949
0002b1 7b49
0002b2 0032                      Char_054:                   .db             0x3E, 0x7F, 0x49, 0x49, 0x49, 0x7B, 0x32, 0x00  ; 6
0002b3 0303
0002b4 7971
0002b5 070d
0002b6 0003                      Char_055:                   .db             0x03, 0x03, 0x71, 0x79, 0x0D, 0x07, 0x03, 0x00  ; 7
0002b7 7f36
0002b8 4949
0002b9 7f49
0002ba 0036                      Char_056:                   .db             0x36, 0x7F, 0x49, 0x49, 0x49, 0x7F, 0x36, 0x00  ; 8
0002bb 6f26
0002bc 4949
0002bd 7f49
0002be 003e                      Char_057:                   .db             0x26, 0x6F, 0x49, 0x49, 0x49, 0x7F, 0x3E, 0x00  ; 9
0002bf 0000
0002c0 2222
0002c1 0000
0002c2 0000                      Char_058:                   .db             0x00, 0x00, 0x22, 0x22, 0x00, 0x00, 0x00, 0x00  ; :
0002c3 0000
0002c4 62a2
0002c5 0000
0002c6 0000                      Char_059:                   .db             0x00, 0x00, 0xA2, 0x62, 0x00, 0x00, 0x00, 0x00  ; ;
0002c7 0800
0002c8 361c
0002c9 4163
0002ca 0000                      Char_060:                   .db             0x00, 0x08, 0x1C, 0x36, 0x63, 0x41, 0x00, 0x00  ; <
0002cb 2400
0002cc 2424
0002cd 2424
0002ce 0024                      Char_061:                   .db             0x00, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x00  ; =
0002cf 4100
0002d0 3663
0002d1 081c
0002d2 0000                      Char_062:                   .db             0x00, 0x41, 0x63, 0x36, 0x1C, 0x08, 0x00, 0x00  ; >
0002d3 0302
0002d4 5951
0002d5 060f
0002d6 0000                      Char_063:                   .db             0x02, 0x03, 0x51, 0x59, 0x0F, 0x06, 0x00, 0x00  ; ?
0002d7 413e
0002d8 5549
0002d9 5d55
0002da 001e                      Char_064:                   .db             0x3E, 0x41, 0x49, 0x55, 0x55, 0x5D, 0x1E, 0x00  ; @
0002db 7f7e
0002dc 0909
0002dd 7f09
0002de 007e                      Char_065:                   .db             0x7E, 0x7F, 0x09, 0x09, 0x09, 0x7F, 0x7E, 0x00  ; A
0002df 7f41
0002e0 497f
0002e1 7f49
0002e2 0036                      Char_066:                   .db             0x41, 0x7F, 0x7F, 0x49, 0x49, 0x7F, 0x36, 0x00  ; B
0002e3 7f3e
0002e4 4141
0002e5 6341
0002e6 0022                      Char_067:                   .db             0x3E, 0x7F, 0x41, 0x41, 0x41, 0x63, 0x22, 0x00  ; C
0002e7 7f41
0002e8 417f
0002e9 7f41
0002ea 003e                      Char_068:                   .db             0x41, 0x7F, 0x7F, 0x41, 0x41, 0x7F, 0x3E, 0x00  ; D
0002eb 7f41
0002ec 497f
0002ed 415d
0002ee 0063                      Char_069:                   .db             0x41, 0x7F, 0x7F, 0x49, 0x5D, 0x41, 0x63, 0x00  ; E
0002ef 7f41
0002f0 497f
0002f1 011d
0002f2 0003                      Char_070:                   .db             0x41, 0x7F, 0x7F, 0x49, 0x1D, 0x01, 0x03, 0x00  ; F
0002f3 7f3e
0002f4 4141
0002f5 7751
0002f6 0076                      Char_071:                   .db             0x3E, 0x7F, 0x41, 0x41, 0x51, 0x77, 0x76, 0x00  ; G
0002f7 7f7f
0002f8 0808
0002f9 7f08
0002fa 007f                      Char_072:                   .db             0x7F, 0x7F, 0x08, 0x08, 0x08, 0x7F, 0x7F, 0x00  ; H
0002fb 0000
0002fc 7f41
0002fd 417f
0002fe 0000                      Char_073:                   .db             0x00, 0x00, 0x41, 0x7F, 0x7F, 0x41, 0x00, 0x00  ; I
0002ff 7030
000300 4140
000301 3f7f
000302 0001                      Char_074:                   .db             0x30, 0x70, 0x40, 0x41, 0x7F, 0x3F, 0x01, 0x00  ; J
000303 7f41
000304 087f
000305 771c
000306 0063                      Char_075:                   .db             0x41, 0x7F, 0x7F, 0x08, 0x1C, 0x77, 0x63, 0x00  ; K
000307 7f41
000308 417f
000309 6040
00030a 0070                      Char_076:                   .db             0x41, 0x7F, 0x7F, 0x41, 0x40, 0x60, 0x70, 0x00  ; L
00030b 7e7f
00030c 180c
00030d 7e0c
00030e 007f                      Char_077:                   .db             0x7F, 0x7E, 0x0C, 0x18, 0x0C, 0x7E, 0x7F, 0x00  ; M
00030f 7f7f
000310 0c06
000311 7f18
000312 007f                      Char_078:                   .db             0x7F, 0x7F, 0x06, 0x0C, 0x18, 0x7F, 0x7F, 0x00  ; N
000313 7f3e
000314 4141
000315 7f41
000316 003e                      Char_079:                   .db             0x3E, 0x7F, 0x41, 0x41, 0x41, 0x7F, 0x3E, 0x00  ; O
000317 7f41
000318 497f
000319 0f09
00031a 0006                      Char_080:                   .db             0x41, 0x7F, 0x7F, 0x49, 0x09, 0x0F, 0x06, 0x00  ; P
00031b 7f3e
00031c 7141
00031d ff61
00031e 00be                      Char_081:                   .db             0x3E, 0x7F, 0x41, 0x71, 0x61, 0xFF, 0xBE, 0x00  ; Q
00031f 7f41
000320 097f
000321 7f09
000322 0076                      Char_082:                   .db             0x41, 0x7F, 0x7F, 0x09, 0x09, 0x7F, 0x76, 0x00  ; R
000323 6f26
000324 4949
000325 7b49
000326 0032                      Char_083:                   .db             0x26, 0x6F, 0x49, 0x49, 0x49, 0x7B, 0x32, 0x00  ; S
000327 0700
000328 7f41
000329 417f
00032a 0007                      Char_084:                   .db             0x00, 0x07, 0x41, 0x7F, 0x7F, 0x41, 0x07, 0x00  ; T
00032b 7f3f
00032c 4040
00032d 7f40
00032e 003f                      Char_085:                   .db             0x3F, 0x7F, 0x40, 0x40, 0x40, 0x7F, 0x3F, 0x00  ; U
00032f 1f0f
000330 6030
000331 1f30
000332 000f                      Char_086:                   .db             0x0F, 0x1F, 0x30, 0x60, 0x30, 0x1F, 0x0F, 0x00  ; V
000333 3f7f
000334 0c18
000335 3f18
000336 007f                      Char_087:                   .db             0x7F, 0x3F, 0x18, 0x0C, 0x18, 0x3F, 0x7F, 0x00  ; W
000337 6341
000338 1c3e
000339 633e
00033a 0041                      Char_088:                   .db             0x41, 0x63, 0x3E, 0x1C, 0x3E, 0x63, 0x41, 0x00  ; X
00033b 0700
00033c 784f
00033d 4f78
00033e 0007                      Char_089:                   .db             0x00, 0x07, 0x4F, 0x78, 0x78, 0x4F, 0x07, 0x00  ; Y
00033f 6347
000340 5971
000341 674d
000342 0073                      Char_090:                   .db             0x47, 0x63, 0x71, 0x59, 0x4D, 0x67, 0x73, 0x00  ; Z
000343 7f00
000344 417f
000345 0041
000346 0000                      Char_091:                   .db             0x00, 0x7F, 0x7F, 0x41, 0x41, 0x00, 0x00, 0x00  ; [
000347 0301
000348 0c06
000349 3018
00034a 0060                      Char_092:                   .db             0x01, 0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x00  ; \
00034b 4100
00034c 7f41
00034d 007f
00034e 0000                      Char_093:                   .db             0x00, 0x41, 0x41, 0x7F, 0x7F, 0x00, 0x00, 0x00  ; ]
00034f 0c08
000350 0306
000351 0c06
000352 0008                      Char_094:                   .db             0x08, 0x0C, 0x06, 0x03, 0x06, 0x0C, 0x08, 0x00  ; ^
000353 8080
000354 8080
000355 8080
000356 8080                      Char_095:                   .db             0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80  ; _
000357 0000
000358 0503
000359 0000
00035a 0000                      Char_096:                   .db             0x00, 0x00, 0x03, 0x05, 0x00, 0x00, 0x00, 0x00  ; `
00035b 7420
00035c 5454
00035d 783c
00035e 0040                      Char_097:                   .db             0x20, 0x74, 0x54, 0x54, 0x3C, 0x78, 0x40, 0x00  ; a
00035f 7f01
000360 487f
000361 7848
000362 0030                      Char_098:                   .db             0x01, 0x7F, 0x7F, 0x48, 0x48, 0x78, 0x30, 0x00  ; b
000363 7c38
000364 4444
000365 6c44
000366 0028                      Char_099:                   .db             0x38, 0x7C, 0x44, 0x44, 0x44, 0x6C, 0x28, 0x00  ; c
000367 7830
000368 4948
000369 7f3f
00036a 0040                      Char_100:                   .db             0x30, 0x78, 0x48, 0x49, 0x3F, 0x7F, 0x40, 0x00  ; d
00036b 7c38
00036c 5454
00036d 5c54
00036e 0018                      Char_101:                   .db             0x38, 0x7C, 0x54, 0x54, 0x54, 0x5C, 0x18, 0x00  ; e
00036f 4800
000370 7f7e
000371 0349
000372 0002                      Char_102:                   .db             0x00, 0x48, 0x7E, 0x7F, 0x49, 0x03, 0x02, 0x00  ; f
000373 bc18
000374 a4a4
000375 7cf8
000376 0004                      Char_103:                   .db             0x18, 0xBC, 0xA4, 0xA4, 0xF8, 0x7C, 0x04, 0x00  ; g
000377 7f41
000378 087f
000379 7c04
00037a 0078                      Char_104:                   .db             0x41, 0x7F, 0x7F, 0x08, 0x04, 0x7C, 0x78, 0x00  ; h
00037b 0000
00037c 7d44
00037d 407d
00037e 0000                      Char_105:                   .db             0x00, 0x00, 0x44, 0x7D, 0x7D, 0x40, 0x00, 0x00  ; i
00037f c040
000380 8880
000381 7afa
000382 0000                      Char_106:                   .db             0x40, 0xC0, 0x80, 0x88, 0xFA, 0x7A, 0x00, 0x00  ; j
000383 7f41
000384 107f
000385 6c38
000386 0044                      Char_107:                   .db             0x41, 0x7F, 0x7F, 0x10, 0x38, 0x6C, 0x44, 0x00  ; k
000387 0000
000388 7f41
000389 407f
00038a 0000                      Char_108:                   .db             0x00, 0x00, 0x41, 0x7F, 0x7F, 0x40, 0x00, 0x00  ; l
00038b 7c7c
00038c 7808
00038d 7c0c
00038e 0078                      Char_109:                   .db             0x7C, 0x7C, 0x08, 0x78, 0x0C, 0x7C, 0x78, 0x00  ; m
00038f 7c04
000390 0478
000391 7c04
000392 0078                      Char_110:                   .db             0x04, 0x7C, 0x78, 0x04, 0x04, 0x7C, 0x78, 0x00  ; n
000393 7c38
000394 4444
000395 7c44
000396 0038                      Char_111:                   .db             0x38, 0x7C, 0x44, 0x44, 0x44, 0x7C, 0x38, 0x00  ; o
000397 fc84
000398 a4f8
000399 3c24
00039a 0018                      Char_112:                   .db             0x84, 0xFC, 0xF8, 0xA4, 0x24, 0x3C, 0x18, 0x00  ; p
00039b 3c18
00039c a424
00039d fcfc
00039e 0080                      Char_113:                   .db             0x18, 0x3C, 0x24, 0xA4, 0xFC, 0xFC, 0x80, 0x00  ; q
00039f 7c44
0003a0 4c78
0003a1 0c04
0003a2 000c                      Char_114:                   .db             0x44, 0x7C, 0x78, 0x4C, 0x04, 0x0C, 0x0C, 0x00  ; r
0003a3 5c08
0003a4 5454
0003a5 7454
0003a6 0020                      Char_115:                   .db             0x08, 0x5C, 0x54, 0x54, 0x54, 0x74, 0x20, 0x00  ; s
0003a7 0404
0003a8 7f3e
0003a9 2444
0003aa 0000                      Char_116:                   .db             0x04, 0x04, 0x3E, 0x7F, 0x44, 0x24, 0x00, 0x00  ; t
0003ab 7c3c
0003ac 4040
0003ad 7c3c
0003ae 0040                      Char_117:                   .db             0x3C, 0x7C, 0x40, 0x40, 0x3C, 0x7C, 0x40, 0x00  ; u
0003af 1c0c
0003b0 6030
0003b1 1c30
0003b2 000c                      Char_118:                   .db             0x0C, 0x1C, 0x30, 0x60, 0x30, 0x1C, 0x0C, 0x00  ; v
0003b3 7c3c
0003b4 3860
0003b5 7c60
0003b6 003c                      Char_119:                   .db             0x3C, 0x7C, 0x60, 0x38, 0x60, 0x7C, 0x3C, 0x00  ; w
0003b7 6c44
0003b8 1038
0003b9 6c38
0003ba 0044                      Char_120:                   .db             0x44, 0x6C, 0x38, 0x10, 0x38, 0x6C, 0x44, 0x00  ; x
0003bb bc9c
0003bc a0a0
0003bd 7cfc
0003be 0000                      Char_121:                   .db             0x9C, 0xBC, 0xA0, 0xA0, 0xFC, 0x7C, 0x00, 0x00  ; y
0003bf 644c
0003c0 5c74
0003c1 644c
0003c2 0000                      Char_122:                   .db             0x4C, 0x64, 0x74, 0x5C, 0x4C, 0x64, 0x00, 0x00  ; z
0003c3 0000
0003c4 3e08
0003c5 4177
0003c6 0041                      Char_123:                   .db             0x00, 0x00, 0x08, 0x3E, 0x77, 0x41, 0x41, 0x00  ; {
0003c7 0000
0003c8 7700
0003c9 0077
0003ca 0000                      Char_124:                   .db             0x00, 0x00, 0x00, 0x77, 0x77, 0x00, 0x00, 0x00  ; |
0003cb 4141
0003cc 3e77
0003cd 0008
0003ce 0000                      Char_125:                   .db             0x41, 0x41, 0x77, 0x3E, 0x08, 0x00, 0x00, 0x00  ; }
0003cf 0302
0003d0 0301
0003d1 0302
0003d2 0001                      Char_126:                   .db             0x02, 0x03, 0x01, 0x03, 0x02, 0x03, 0x01, 0x00  ; ~
0003d3 7870
0003d4 464c
0003d5 784c
0003d6 0070                      Char_127:                   .db             0x70, 0x78, 0x4C, 0x46, 0x4C, 0x78, 0x70, 0x00  ; Delta
0003d7 bf1e
0003d8 e1a1
0003d9 3361
0003da 0012                      Char_128:                   .db             0x1E, 0xBF, 0xA1, 0xE1, 0x61, 0x33, 0x12, 0x00  ; C with cedilla
0003db 7d3d
0003dc 4040
0003dd 7d3d
0003de 0040                      Char_129:                   .db             0x3D, 0x7D, 0x40, 0x40, 0x3D, 0x7D, 0x40, 0x00  ; u with diaeresis
0003df 7c38
0003e0 5654
0003e1 5d55
0003e2 0019                      Char_130:                   .db             0x38, 0x7C, 0x54, 0x56, 0x55, 0x5D, 0x19, 0x00  ; e with acute
0003e3 7122
0003e4 5555
0003e5 793d
0003e6 0042                      Char_131:                   .db             0x22, 0x71, 0x55, 0x55, 0x3D, 0x79, 0x42, 0x00  ; a with circumflex
0003e7 7521
0003e8 5454
0003e9 793d
0003ea 0040                      Char_132:                   .db             0x21, 0x75, 0x54, 0x54, 0x3D, 0x79, 0x40, 0x00  ; a with diaeresis
0003eb 7521
0003ec 5655
0003ed 783c
0003ee 0040                      Char_133:                   .db             0x21, 0x75, 0x55, 0x56, 0x3C, 0x78, 0x40, 0x00  ; a with grave
0003ef 7420
0003f0 5757
0003f1 783c
0003f2 0040                      Char_134:                   .db             0x20, 0x74, 0x57, 0x57, 0x3C, 0x78, 0x40, 0x00  ; a with ring
0003f3 bc18
0003f4 e4a4
0003f5 2464
0003f6 0000                      Char_135:                   .db             0x18, 0xBC, 0xA4, 0xE4, 0x64, 0x24, 0x00, 0x00  ; c with cedilla
0003f7 7d3a
0003f8 5555
0003f9 5d55
0003fa 001a                      Char_136:                   .db             0x3A, 0x7D, 0x55, 0x55, 0x55, 0x5D, 0x1A, 0x00  ; e with circumflex
0003fb 7d39
0003fc 5454
0003fd 5d54
0003fe 0019                      Char_137:                   .db             0x39, 0x7D, 0x54, 0x54, 0x54, 0x5D, 0x19, 0x00  ; e with diaeresis
0003ff 7d39
000400 5655
000401 5c54
000402 0018                      Char_138:                   .db             0x39, 0x7D, 0x55, 0x56, 0x54, 0x5C, 0x18, 0x00  ; e with grave
000403 0100
000404 7c45
000405 417c
000406 0001                      Char_139:                   .db             0x00, 0x01, 0x45, 0x7C, 0x7C, 0x41, 0x01, 0x00  ; i with diaeresis
000407 0102
000408 7d45
000409 417d
00040a 0002                      Char_140:                   .db             0x02, 0x01, 0x45, 0x7D, 0x7D, 0x41, 0x02, 0x00  ; i with circumflex
00040b 0101
00040c 7e45
00040d 407c
00040e 0000                      Char_141:                   .db             0x01, 0x01, 0x45, 0x7E, 0x7C, 0x40, 0x00, 0x00  ; i with grave
00040f 7d79
000410 1414
000411 7d14
000412 0079                      Char_142:                   .db             0x79, 0x7D, 0x14, 0x14, 0x14, 0x7D, 0x79, 0x00  ; A with diaeresis
000413 7c78
000414 1717
000415 7c17
000416 0078                      Char_143:                   .db             0x78, 0x7C, 0x17, 0x17, 0x17, 0x7C, 0x78, 0x00  ; A with ring
000417 7c44
000418 567c
000419 4555
00041a 0045                      Char_144:                   .db             0x44, 0x7C, 0x7C, 0x56, 0x55, 0x45, 0x45, 0x00  ; E with grave
00041b 7420
00041c 7c54
00041d 5454
00041e 0058                      Char_145:                   .db             0x20, 0x74, 0x54, 0x7C, 0x54, 0x54, 0x58, 0x00  ; ae
00041f 7f7e
000420 0909
000421 497f
000422 0049                      Char_146:                   .db             0x7E, 0x7F, 0x09, 0x09, 0x7F, 0x49, 0x49, 0x00  ; AE
000423 7d3a
000424 4545
000425 7d45
000426 003a                      Char_147:                   .db             0x3A, 0x7D, 0x45, 0x45, 0x45, 0x7D, 0x3A, 0x00  ; o with circumflex
000427 7d39
000428 4444
000429 7d44
00042a 0039                      Char_148:                   .db             0x39, 0x7D, 0x44, 0x44, 0x44, 0x7D, 0x39, 0x00  ; o with diaeresis
00042b 7d39
00042c 4645
00042d 7c44
00042e 0038                      Char_149:                   .db             0x39, 0x7D, 0x45, 0x46, 0x44, 0x7C, 0x38, 0x00  ; o with grave
00042f 7d3e
000430 4141
000431 7d3d
000432 0042                      Char_150:                   .db             0x3E, 0x7D, 0x41, 0x41, 0x3D, 0x7D, 0x42, 0x00  ; u with circumflex
000433 7d3d
000434 4241
000435 7c3c
000436 0040                      Char_151:                   .db             0x3D, 0x7D, 0x41, 0x42, 0x3C, 0x7C, 0x40, 0x00  ; u with grave
000437 bd9d
000438 a0a0
000439 7dfd
00043a 0000                      Char_152:                   .db             0x9D, 0xBD, 0xA0, 0xA0, 0xFD, 0x7D, 0x00, 0x00  ; y with diaeresis
00043b 7f3d
00043c 4242
00043d 7f42
00043e 003d                      Char_153:                   .db             0x3D, 0x7F, 0x42, 0x42, 0x42, 0x7F, 0x3D, 0x00  ; O with diaeresis
00043f 7d3d
000440 4040
000441 7d40
000442 003d                      Char_154:                   .db             0x3D, 0x7D, 0x40, 0x40, 0x40, 0x7D, 0x3D, 0x00  ; U with diaeresis
000443 3e1c
000444 7f22
000445 3663
000446 0014                      Char_155:                   .db             0x1C, 0x3E, 0x22, 0x7F, 0x63, 0x36, 0x14, 0x00  ; cent sign
000447 7e68
000448 693f
000449 4243
00044a 0020                      Char_156:                   .db             0x68, 0x7E, 0x3F, 0x69, 0x43, 0x42, 0x20, 0x00  ; pound sign
00044b 2900
00044c 7e2b
00044d 2b7e
00044e 0029                      Char_157:                   .db             0x00, 0x29, 0x2B, 0x7E, 0x7E, 0x2B, 0x29, 0x00  ; yen sign
00044f 7f7f
000450 2505
000451 fa77
000452 00a0                      Char_158:                   .db             0x7F, 0x7F, 0x05, 0x25, 0x77, 0xFA, 0xA0, 0x00  ; P sub t
000453 c040
000454 fe88
000455 097f
000456 0203                      Char_159:                   .db             0x40, 0xC0, 0x88, 0xFE, 0x7F, 0x09, 0x03, 0x02  ; function
000457 7420
000458 5654
000459 793d
00045a 0041                      Char_160:                   .db             0x20, 0x74, 0x54, 0x56, 0x3D, 0x79, 0x41, 0x00  ; a with acute
00045b 0000
00045c 7e44
00045d 417d
00045e 0001                      Char_161:                   .db             0x00, 0x00, 0x44, 0x7E, 0x7D, 0x41, 0x01, 0x00  ; i with acute
00045f 7c38
000460 4644
000461 7d45
000462 0039                      Char_162:                   .db             0x38, 0x7C, 0x44, 0x46, 0x45, 0x7D, 0x39, 0x00  ; o with acute
000463 7c3c
000464 4240
000465 7d3d
000466 0041                      Char_163:                   .db             0x3C, 0x7C, 0x40, 0x42, 0x3D, 0x7D, 0x41, 0x00  ; u with acute
000467 7d06
000468 0679
000469 7d06
00046a 0079                      Char_164:                   .db             0x06, 0x7D, 0x79, 0x06, 0x06, 0x7D, 0x79, 0x00  ; n with tilde
00046b 7d7e
00046c 1a0d
00046d 7d32
00046e 007d                      Char_165:                   .db             0x7E, 0x7D, 0x0D, 0x1A, 0x32, 0x7D, 0x7D, 0x00  ; N with tilde
00046f 2000
000470 2d2d
000471 2e27
000472 0020                      Char_166:                   .db             0x00, 0x20, 0x2D, 0x2D, 0x27, 0x2E, 0x20, 0x00  ; a superscript, underlined
000473 2600
000474 292f
000475 262f
000476 0000                      Char_167:                   .db             0x00, 0x26, 0x2F, 0x29, 0x2F, 0x26, 0x00, 0x00  ; o superscript, underlined
000477 7830
000478 454d
000479 7040
00047a 0030                      Char_168:                   .db             0x30, 0x78, 0x4D, 0x45, 0x40, 0x70, 0x30, 0x00  ; ? (upside down)
00047b 3838
00047c 0808
00047d 0808
00047e 0000                      Char_169:                   .db             0x38, 0x38, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00  ; logic negation, reversed
00047f 0808
000480 0808
000481 3838
000482 0000                      Char_170:                   .db             0x08, 0x08, 0x08, 0x08, 0x38, 0x38, 0x00, 0x00  ; logic negation
000483 1f2f
000484 4c08
000485 786a
000486 0058                      Char_171:                   .db             0x2F, 0x1F, 0x08, 0x4C, 0x6A, 0x78, 0x58, 0x00  ; 1/2
000487 1f2f
000488 3428
000489 787a
00048a 0020                      Char_172:                   .db             0x2F, 0x1F, 0x28, 0x34, 0x7A, 0x78, 0x20, 0x00  ; 1/4
00048b 0000
00048c 7d30
00048d 307d
00048e 0000                      Char_173:                   .db             0x00, 0x00, 0x30, 0x7D, 0x7D, 0x30, 0x00, 0x00  ; ! (upside down)
00048f 1c08
000490 2a36
000491 361c
000492 0022                      Char_174:                   .db             0x08, 0x1C, 0x36, 0x2A, 0x1C, 0x36, 0x22, 0x00  ; double less than
000493 3622
000494 2a1c
000495 1c36
000496 0008                      Char_175:                   .db             0x22, 0x36, 0x1C, 0x2A, 0x36, 0x1C, 0x08, 0x00  ; double greater than
000497 00aa
000498 0055
000499 00aa
00049a 0055                      Char_176:                   .db             0xAA, 0x00, 0x55, 0x00, 0xAA, 0x00, 0x55, 0x00  ; gradient, light
00049b 55aa
00049c 55aa
00049d 55aa
00049e 55aa                      Char_177:                   .db             0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55  ; gradient, medium
00049f ffdd
0004a0 77aa
0004a1 aadd
0004a2 77ff                      Char_178:                   .db             0xDD, 0xFF, 0xAA, 0x77, 0xDD, 0xAA, 0xFF, 0x77  ; gradient, heavy
0004a3 0000
0004a4 ff00
0004a5 00ff
0004a6 0000                      Char_179:                   .db             0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00  ; line, vertical single
0004a7 1010
0004a8 ff10
0004a9 00ff
0004aa 0000                      Char_180:                   .db             0x10, 0x10, 0x10, 0xFF, 0xFF, 0x00, 0x00, 0x00  ; line, vertical single left single 
0004ab 1414
0004ac ff14
0004ad 00ff
0004ae 0000                      Char_181:                   .db             0x14, 0x14, 0x14, 0xFF, 0xFF, 0x00, 0x00, 0x00  ; line, vertical single left double
0004af 1010
0004b0 ffff
0004b1 ff00
0004b2 00ff                      Char_182:                   .db             0x10, 0x10, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00  ; line, vertical double left single
0004b3 1010
0004b4 f0f0
0004b5 f010
0004b6 00f0                      Char_183:                   .db             0x10, 0x10, 0xF0, 0xF0, 0x10, 0xF0, 0xF0, 0x00  ; line, left single down double
0004b7 1414
0004b8 fc14
0004b9 00fc
0004ba 0000                      Char_184:                   .db             0x14, 0x14, 0x14, 0xFC, 0xFC, 0x00, 0x00, 0x00  ; line, left double down single
0004bb 1414
0004bc f7f7
0004bd ff00
0004be 00ff                      Char_185:                   .db             0x14, 0x14, 0xF7, 0xF7, 0x00, 0xFF, 0xFF, 0x00  ; line, vertical double left double
0004bf 0000
0004c0 ffff
0004c1 ff00
0004c2 00ff                      Char_186:                   .db             0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00  ; line, vertical double
0004c3 1414
0004c4 f4f4
0004c5 fc04
0004c6 00fc                      Char_187:                   .db             0x14, 0x14, 0xF4, 0xF4, 0x04, 0xFC, 0xFC, 0x00  ; line, left double down double
0004c7 1414
0004c8 1717
0004c9 1f10
0004ca 001f                      Char_188:                   .db             0x14, 0x14, 0x17, 0x17, 0x10, 0x1F, 0x1F, 0x00  ; line, left double up double
0004cb 1010
0004cc 1f1f
0004cd 1f10
0004ce 001f                      Char_189:                   .db             0x10, 0x10, 0x1F, 0x1F, 0x10, 0x1F, 0x1F, 0x00  ; line, left single up double
0004cf 1414
0004d0 1f14
0004d1 001f
0004d2 0000                      Char_190:                   .db             0x14, 0x14, 0x14, 0x1F, 0x1F, 0x00, 0x00, 0x00  ; line, left double up single
0004d3 1010
0004d4 f010
0004d5 00f0
0004d6 0000                      Char_191:                   .db             0x10, 0x10, 0x10, 0xF0, 0xF0, 0x00, 0x00, 0x00  ; line, left single down single
0004d7 0000
0004d8 1f00
0004d9 101f
0004da 1010                      Char_192:                   .db             0x00, 0x00, 0x00, 0x1F, 0x1F, 0x10, 0x10, 0x10  ; line, up single right single
0004db 1010
0004dc 1f10
0004dd 101f
0004de 1010                      Char_193:                   .db             0x10, 0x10, 0x10, 0x1F, 0x1F, 0x10, 0x10, 0x10  ; line, horizontal single up single
0004df 1010
0004e0 f010
0004e1 10f0
0004e2 1010                      Char_194:                   .db             0x10, 0x10, 0x10, 0xF0, 0xF0, 0x10, 0x10, 0x10  ; line, horizontal single down single
0004e3 0000
0004e4 ff00
0004e5 10ff
0004e6 1010                      Char_195:                   .db             0x00, 0x00, 0x00, 0xFF, 0xFF, 0x10, 0x10, 0x10  ; line, vertical single right single
0004e7 1010
0004e8 1010
0004e9 1010
0004ea 1010                      Char_196:                   .db             0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10  ; line, horizontal
0004eb 1010
0004ec ff10
0004ed 10ff
0004ee 1010                      Char_197:                   .db             0x10, 0x10, 0x10, 0xFF, 0xFF, 0x10, 0x10, 0x10  ; line, horizontal single vertical single
0004ef 0000
0004f0 ff00
0004f1 14ff
0004f2 1414                      Char_198:                   .db             0x00, 0x00, 0x00, 0xFF, 0xFF, 0x14, 0x14, 0x14  ; line, vertical single right double
0004f3 0000
0004f4 ffff
0004f5 ff00
0004f6 10ff                      Char_199:                   .db             0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x10  ; line, vertical double right single
0004f7 0000
0004f8 1f1f
0004f9 1710
0004fa 1417                      Char_200:                   .db             0x00, 0x00, 0x1F, 0x1F, 0x10, 0x17, 0x17, 0x14  ; line, up double right double
0004fb 0000
0004fc fcfc
0004fd f404
0004fe 14f4                      Char_201:                   .db             0x00, 0x00, 0xFC, 0xFC, 0x04, 0xF4, 0xF4, 0x14  ; line, right double down double
0004ff 1414
000500 1717
000501 1710
000502 1417                      Char_202:                   .db             0x14, 0x14, 0x17, 0x17, 0x10, 0x17, 0x17, 0x14  ; line, horizontal double up double
000503 1414
000504 f4f4
000505 f404
000506 14f4                      Char_203:                   .db             0x14, 0x14, 0xF4, 0xF4, 0x04, 0xF4, 0xF4, 0x14  ; line, horizontal double down double
000507 0000
000508 ffff
000509 f700
00050a 14f7                      Char_204:                   .db             0x00, 0x00, 0xFF, 0xFF, 0x00, 0xF7, 0xF7, 0x14  ; line, vertical double right double
00050b 1414
00050c 1414
00050d 1414
00050e 1414                      Char_205:                   .db             0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14  ; line, horizontal double
00050f 1414
000510 f7f7
000511 f700
000512 14f7                      Char_206:                   .db             0x14, 0x14, 0xF7, 0xF7, 0x00, 0xF7, 0xF7, 0x14  ; line, horizontal double vertical double
000513 1414
000514 1714
000515 1417
000516 1414                      Char_207:                   .db             0x14, 0x14, 0x14, 0x17, 0x17, 0x14, 0x14, 0x14  ; line, horizontal double up single
000517 1010
000518 1f1f
000519 1f10
00051a 101f                      Char_208:                   .db             0x10, 0x10, 0x1F, 0x1F, 0x10, 0x1F, 0x1F, 0x10  ; line, horizontal single up double
00051b 1414
00051c f414
00051d 14f4
00051e 1414                      Char_209:                   .db             0x14, 0x14, 0x14, 0xF4, 0xF4, 0x14, 0x14, 0x14  ; line, horizontal double down single
00051f 1010
000520 f0f0
000521 f010
000522 10f0                      Char_210:                   .db             0x10, 0x10, 0xF0, 0xF0, 0x10, 0xF0, 0xF0, 0x10  ; line, horizontal single down double
000523 0000
000524 1f1f
000525 1f10
000526 101f                      Char_211:                   .db             0x00, 0x00, 0x1F, 0x1F, 0x10, 0x1F, 0x1F, 0x10  ; line, up double right single
000527 0000
000528 1f00
000529 141f
00052a 1414                      Char_212:                   .db             0x00, 0x00, 0x00, 0x1F, 0x1F, 0x14, 0x14, 0x14  ; line, up single right double
00052b 0000
00052c fc00
00052d 14fc
00052e 1414                      Char_213:                   .db             0x00, 0x00, 0x00, 0xFC, 0xFC, 0x14, 0x14, 0x14  ; line, right double down single
00052f 0000
000530 f0f0
000531 f010
000532 10f0                      Char_214:                   .db             0x00, 0x00, 0xF0, 0xF0, 0x10, 0xF0, 0xF0, 0x10  ; line, right single down double
000533 1010
000534 ffff
000535 ff10
000536 10ff                      Char_215:                   .db             0x10, 0x10, 0xFF, 0xFF, 0x10, 0xFF, 0xFF, 0x10  ; line, horizontal single vertical double
000537 1414
000538 ff14
000539 14ff
00053a 1414                      Char_216:                   .db             0x14, 0x14, 0x14, 0xFF, 0xFF, 0x14, 0x14, 0x14  ; line, horizontal double vertical single
00053b 1010
00053c 1f10
00053d 001f
00053e 0000                      Char_217:                   .db             0x10, 0x10, 0x10, 0x1F, 0x1F, 0x00, 0x00, 0x00  ; line, up single left single
00053f 0000
000540 f000
000541 10f0
000542 1010                      Char_218:                   .db             0x00, 0x00, 0x00, 0xF0, 0xF0, 0x10, 0x10, 0x10  ; line, right single down single
000543 ffff
000544 ffff
000545 ffff
000546 ffff                      Char_219:                   .db             0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF  ; block, black
000547 f0f0
000548 f0f0
000549 f0f0
00054a f0f0                      Char_220:                   .db             0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0  ; block, top white bottom black
00054b ffff
00054c ffff
00054d 0000
00054e 0000                      Char_221:                   .db             0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00  ; block, left black right white
00054f 0000
000550 0000
000551 ffff
000552 ffff                      Char_222:                   .db             0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF  ; block, left white right black
000553 0f0f
000554 0f0f
000555 0f0f
000556 0f0f                      Char_223:                   .db             0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F  ; block, top black bottom white
000557 7c38
000558 6444
000559 6c38
00055a 0040                      Char_224:                   .db             0x38, 0x7C, 0x44, 0x64, 0x38, 0x6C, 0x40, 0x00  ; alpha
00055b ff7e
00055c 4501
00055d 7a4f
00055e 0030                      Char_225:                   .db             0x7E, 0xFF, 0x01, 0x45, 0x4F, 0x7A, 0x30, 0x00  ; beta
00055f 7f41
000560 417f
000561 0101
000562 0003                      Char_226:                   .db             0x41, 0x7F, 0x7F, 0x41, 0x01, 0x01, 0x03, 0x00  ; Gamma
000563 7c08
000564 043c
000565 3c7c
000566 0006                      Char_227:                   .db             0x08, 0x7C, 0x3C, 0x04, 0x7C, 0x3C, 0x06, 0x00  ; pi
000567 6341
000568 5d77
000569 4149
00056a 0063                      Char_228:                   .db             0x41, 0x63, 0x77, 0x5D, 0x49, 0x41, 0x63, 0x00  ; Sigma
00056b 7c38
00056c 4c44
00056d 0434
00056e 0004                      Char_229:                   .db             0x38, 0x7C, 0x44, 0x4C, 0x34, 0x04, 0x04, 0x00  ; sigma
00056f 7cfc
000570 4040
000571 3c7c
000572 0000                      Char_230:                   .db             0xFC, 0x7C, 0x40, 0x40, 0x7C, 0x3C, 0x00, 0x00  ; mu
000573 0c08
000574 7c04
000575 043c
000576 0004                      Char_231:                   .db             0x08, 0x0C, 0x04, 0x7C, 0x3C, 0x04, 0x04, 0x00  ; tau
000577 3c18
000578 ffa5
000579 3ca5
00057a 0018                      Char_232:                   .db             0x18, 0x3C, 0xA5, 0xFF, 0xA5, 0x3C, 0x18, 0x00  ; Phi
00057b 7f3e
00057c 4949
00057d 7f49
00057e 003e                      Char_233:                   .db             0x3E, 0x7F, 0x49, 0x49, 0x49, 0x7F, 0x3E, 0x00  ; theta
00057f 5f4e
000580 0171
000581 5f71
000582 004e                      Char_234:                   .db             0x4E, 0x5F, 0x71, 0x01, 0x71, 0x5F, 0x4E, 0x00  ; Omega
000583 7830
000584 4d4b
000585 397d
000586 0002                      Char_235:                   .db             0x30, 0x78, 0x4B, 0x4D, 0x7D, 0x39, 0x02, 0x00  ; delta
000587 2418
000588 1824
000589 2418
00058a 1824                      Char_236:                   .db             0x18, 0x24, 0x24, 0x18, 0x18, 0x24, 0x24, 0x18  ; infinity
00058b 7458
00058c 3c34
00058d 2e2c
00058e 001a                      Char_237:                   .db             0x58, 0x74, 0x34, 0x3C, 0x2C, 0x2E, 0x1A, 0x00  ; ????
00058f 7c38
000590 5454
000591 4454
000592 0000                      Char_238:                   .db             0x38, 0x7C, 0x54, 0x54, 0x54, 0x44, 0x00, 0x00  ; set symbol
000593 7e7c
000594 0202
000595 7e02
000596 007c                      Char_239:                   .db             0x7C, 0x7E, 0x02, 0x02, 0x02, 0x7E, 0x7C, 0x00  ; set intersect symbol
000597 2a2a
000598 2a2a
000599 2a2a
00059a 002a                      Char_240:                   .db             0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x00  ; triple equals
00059b 4400
00059c 5f44
00059d 445f
00059e 0044                      Char_241:                   .db             0x00, 0x44, 0x44, 0x5F, 0x5F, 0x44, 0x44, 0x00  ; plus/minus
00059f 4000
0005a0 5b51
0005a1 444e
0005a2 0000                      Char_242:                   .db             0x00, 0x40, 0x51, 0x5B, 0x4E, 0x44, 0x00, 0x00  ; greater than or equal
0005a3 4400
0005a4 5b4e
0005a5 4051
0005a6 0000                      Char_243:                   .db             0x00, 0x44, 0x4E, 0x5B, 0x51, 0x40, 0x00, 0x00  ; less than or equal
0005a7 0000
0005a8 fe00
0005a9 01ff
0005aa 0607                      Char_244:                   .db             0x00, 0x00, 0x00, 0xFE, 0xFF, 0x01, 0x07, 0x06  ; integral, top
0005ab e060
0005ac ff80
0005ad 007f
0005ae 0000                      Char_245:                   .db             0x60, 0xE0, 0x80, 0xFF, 0x7F, 0x00, 0x00, 0x00  ; integral, bottom
0005af 0800
0005b0 2a08
0005b1 082a
0005b2 0008                      Char_246:                   .db             0x00, 0x08, 0x08, 0x2A, 0x2A, 0x08, 0x08, 0x00  ; division symbol
0005b3 3624
0005b4 3612
0005b5 3624
0005b6 0012                      Char_247:                   .db             0x24, 0x36, 0x12, 0x36, 0x24, 0x36, 0x12, 0x00  ; approximately equal
0005b7 0200
0005b8 0507
0005b9 0207
0005ba 0000                      Char_248:                   .db             0x00, 0x02, 0x07, 0x05, 0x07, 0x02, 0x00, 0x00  ; degree symbol
0005bb 0000
0005bc 1800
0005bd 0018
0005be 0000                      Char_249:                   .db             0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00  ; dot product
0005bf 0000
0005c0 1000
0005c1 0010
0005c2 0000                      Char_250:                   .db             0x00, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x00  ; dash, tiny
0005c3 3010
0005c4 4070
0005c5 7f7f
0005c6 0101                      Char_251:                   .db             0x10, 0x30, 0x70, 0x40, 0x7F, 0x7F, 0x01, 0x01  ; square root
0005c7 0f01
0005c8 010e
0005c9 0e0f
0005ca 0000                      Char_252:                   .db             0x01, 0x0F, 0x0E, 0x01, 0x0F, 0x0E, 0x00, 0x00  ; superscript n
0005cb 0d0d
0005cc 0b0b
0005cd 0000
0005ce 0000                      Char_253:                   .db             0x0D, 0x0D, 0x0B, 0x0B, 0x00, 0x00, 0x00, 0x00  ; ????
0005cf 0000
0005d0 3c3c
0005d1 3c3c
0005d2 0000                      Char_254:                   .db             0x00, 0x00, 0x3C, 0x3C, 0x3C, 0x3C, 0x00, 0x00  ; square, small black
0005d3 0000
0005d4 0000
0005d5 0000
0005d6 0000                      Char_255:                   .db             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00  ; space
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; --------------------------------------------------------------------------------
                                 ; Description: calculates exact location in pixel array (X-pointer).
                                 ;              Used to display something at that location.
                                 ;              Note - to find array location: loc = ((y)/8)*WIDTH) + x .
                                 ; Subroutine type:
                                 ;   - PUBLIC
                                 ; Dependencies:
                                 ;   - r18: pixel grid x position [subroutine does not change]
                                 ;   - r19: pixel grid y position [subroutine does not change]
                                 ; --------------------------------------------------------------------------------
                                 GFX_set_array_pos:     
0005d7 920f                                                  push            r0                                      ; push all used registers to preserve them
0005d8 921f                                                  push            r1
0005d9 930f                                                  push            r16
0005da 931f                                                  push            r17
0005db e1a0                                                  ldi             XL, low(pixel_array<<1)
0005dc e0b2                                                  ldi             XH, high(pixel_array<<1)
0005dd 2f03                                                  mov             r16, r19                                ; copy y position
0005de 7007                                                  andi            r16, (HEIGHT-1)/8                       ; get remainder (for vert byte position)
0005df e840                                                  ldi             r20, 0x80                               ; load a single bit to be rshifted into place (bit order reversed, which is function of the screen)
                                     GFX_set_array_pos_bit_place:
0005e0 3000                                                  cpi             r16, 0x00                               ; are we done shifting?
0005e1 f019                                                  breq            GFX_set_array_pos_cont
0005e2 950a                                                  dec             r16                                     ; sub 1 from number of shifts
0005e3 9546                                                  lsr             r20                                     ; shift bit by one
0005e4 cffb                                                  rjmp            GFX_set_array_pos_bit_place
                                     GFX_set_array_pos_cont:
0005e5 2f03                                                  mov             r16, r19                                ; copy y position; will hold result
0005e6 9506                                                  lsr             r16                                     ; i = y/8
0005e7 9506                                                  lsr             r16
0005e8 9506                                                  lsr             r16
0005e9 e810                                                  ldi             r17, WIDTH                              ; prep WIDTH
0005ea 9f01                                                  mul             r16, r17                                ; j = i*W
                                 
0005eb 0e02                                                  add             r0, r18                                 ; loc = j + x
0005ec f408                                                  brcc            GFX_set_array_pos_end                   ; if a carry, must inc the result's high byte
0005ed 9413                                                  inc             r1
                                     GFX_set_array_pos_end:
0005ee 0da0                                                  add             XL, r0                                  ; add calculated location to pointer
0005ef 1db1                                                  adc             XH, r1
0005f0 911f                                                  pop             r17                                     ; reinstate all pushed registers
0005f1 910f                                                  pop             r16
0005f2 901f                                                  pop             r1
0005f3 900f                                                  pop             r0
0005f4 9508                                                  ret
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Description: blanks an 8pix by 8pix block.
                                 ; Subroutine type:
                                 ;   - PUBLIC
                                 ; Dependencies:
                                 ;   - X-pointer loaded with location to draw
                                 ; --------------------------------------------------------------------------------
                                 GFX_draw_blank:
0005f5 930f                                                  push            r16
0005f6 931f                                                  push            r17
0005f7 2700                                                  clr             r16
0005f8 2711                                                  clr             r17
                                     GFX_draw_blank_loop:
0005f9 931d                                                  st              X+, r17
0005fa 9503                                                  inc             r16
0005fb 3008                                                  cpi             r16, 8
0005fc f009                                                  breq            GFX_draw_blank_end
0005fd cffb                                                  rjmp            GFX_draw_blank_loop
                                     GFX_draw_blank_end:
0005fe 911f                                                  pop             r17
0005ff 910f                                                  pop             r16
000600 9508                                                  ret
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Description: draws character to the array (8pix x 8pix).
                                 ; Subroutine type:
                                 ;   - PUBLIC
                                 ; Dependencies:
                                 ;   - X-pointer loaded with location to draw
                                 ; --------------------------------------------------------------------------------
                                 GFX_draw_shape:
000601 930f                                                  push            r16
000602 931f                                                  push            r17
000603 2700                                                  clr             r16
000604 e0c0                                                  ldi             YL, low(sprite<<1)
000605 e0d2                                                  ldi             YH, high(sprite<<1)
                                     GFX_draw_shape_loop:
000606 9119                                                  ld              r17, Y+
000607 931d                                                  st              X+, r17
000608 9503                                                  inc             r16
000609 3008                                                  cpi             r16, 8
00060a f009                                                  breq            GFX_draw_shape_end
00060b cffa                                                  rjmp            GFX_draw_shape_loop
                                     GFX_draw_shape_end:
00060c 911f                                                  pop             r17
00060d 910f                                                  pop             r16
00060e 9508                                                  ret
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Description: sets sprite to whatever char the Z pointer was prepped to.
                                 ;              This should used when you're using the supplied ascii_chars.asm
                                 ;              byte table.
                                 ; Subroutine type:
                                 ;   - PUBLIC
                                 ; Dependencies:
                                 ;   - Z-pointer: loaded with pmem character location
                                 ; --------------------------------------------------------------------------------
                                 GFX_set_shape:
00060f 930f                                                  push            r16
000610 931f                                                  push            r17
000611 2700                                                  clr             r16
000612 e0c0                                                  ldi             YL, low(sprite<<1)
000613 e0d2                                                  ldi             YH, high(sprite<<1)
                                     GFX_set_shape_loop:
000614 9115                                                  lpm             r17, Z+
000615 9319                                                  st              Y+, r17
000616 9503                                                  inc             r16
000617 3008                                                  cpi             r16, 8
000618 f009                                                  breq            GFX_set_shape_end
000619 cffa                                                  rjmp            GFX_set_shape_loop
                                     GFX_set_shape_end:
00061a 911f                                                  pop             r17
00061b 910f                                                  pop             r16
00061c 9508                                                  ret
                                 
                                 ; --------------------------------------------------------------------------------
                                 ; Description: clears array of all information (equivalent to clearing the screen).
                                 ; Subroutine type:
                                 ;   - PUBLIC
                                 ; Dependencies:
                                 ;   - none
                                 ; --------------------------------------------------------------------------------
                                 GFX_clear_array:
00061d 2711                                                  clr             r17
00061e 2722                                                  clr             r18
00061f 2733                                                  clr             r19
000620 e1a0                                                  ldi             XL, low(pixel_array<<1)
000621 e0b2                                                  ldi             XH, high(pixel_array<<1)
                                     GFX_clear_col:                                                                  ; for each col
000622 3038                                                  cpi             r19, HEIGHT/8
000623 f440                                                  brcc            GFX_clear_done
                                         GFX_clear_row:                                                              ; for each row
000624 3820                                                  cpi             r18, WIDTH
000625 f418                                                  brcc            GFX_clear_nr
000626 931d                                                  st              X+, r17
000627 9523                                                  inc             r18
000628 cffb                                                  rjmp            GFX_clear_row
                                             GFX_clear_nr:                                                           ; move to next row
000629 2722                                                  clr             r18
00062a 9533                                                  inc             r19
00062b cff6                                                  rjmp            GFX_clear_col
                                     GFX_clear_done:                                                                 ; done clearing
00062c 9508                                                  ret
                                 
                                 ; --------------------------------------------------------------------------------
                                 .include    "char_library.asm"
                                 
00062d e4ee
00062e e0f6                      	set_pointer	ZL, ZH, Char_084
00062f dfdf                      	rcall	GFX_set_shape
000630 e020                      	ldi r18,0
000631 e030                      	ldi r19,0
000632 dfa4                      	rcall GFX_set_array_pos
000633 dfcd                      	rcall	GFX_draw_shape
000634 e1a0
000635 e0b2                      	set_pointer	XL, XH, pixel_array
000636 db80                      	rcall	OLED_refresh_screen
                                 	;---------------------------------
000637 e2e6
000638 e0f6                      	set_pointer	ZL, ZH, Char_079
000639 dfd5                      	rcall	GFX_set_shape
00063a e028                      	ldi r18,8
00063b e030                      	ldi r19,0
00063c df9a                      	rcall GFX_set_array_pos
00063d dfc3                      	rcall	GFX_draw_shape
                                 	
                                 ;------------------------------------
00063e e2e6
00063f e0f6                      	set_pointer	ZL, ZH, Char_079
000640 dfce                      	rcall	GFX_set_shape
000641 e120                      	ldi r18,16
000642 e030                      	ldi r19,0
000643 df93                      	rcall GFX_set_array_pos
000644 dfbc                      	rcall	GFX_draw_shape
                                 
                                 ;------------------------------------
000645 eeee
000646 e0f5                      	set_pointer	ZL, ZH, Char_072
000647 dfc7                      	rcall	GFX_set_shape
000648 e220                      	ldi r18,32
000649 e030                      	ldi r19,0
00064a df8c                      	rcall GFX_set_array_pos
00064b dfb5                      	rcall	GFX_draw_shape
                                 ;------------------------------------
00064c e2e6
00064d e0f6                      	set_pointer	ZL, ZH, Char_079
00064e dfc0                      	rcall	GFX_set_shape
00064f e228                      	ldi r18,40
000650 e030                      	ldi r19,0
000651 df85                      	rcall GFX_set_array_pos
000652 dfae                      	rcall	GFX_draw_shape
                                 ;------------------------------------
000653 e4ee
000654 e0f6                      	set_pointer	ZL, ZH, Char_084
000655 dfb9                      	rcall	GFX_set_shape
                                 	
000656 e320                      	ldi r18,48
000657 e030                      	ldi r19,0
000658 df7e                      	rcall GFX_set_array_pos
                                 	
000659 dfa7                      	rcall	GFX_draw_shape
                                 	
00065a e1a0
00065b e0b2                      	set_pointer	XL, XH, pixel_array
00065c db5a                      	rcall	OLED_refresh_screen
00065d daca                      	rcall delay_1s
00065e caa1                      	rjmp setup
                                 ;---------------------------------------------
                                 char_loop2:
00065f e2ee
000660 e0f6                      	set_pointer	ZL, ZH, Char_080
000661 dfad                      	rcall	GFX_set_shape
000662 e020                      	ldi r18,0
000663 e138                      	ldi r19,24
000664 df72                      	rcall GFX_set_array_pos
000665 df9b                      	rcall	GFX_draw_shape
                                 ;----------------------------------
000666 ede6
000667 e0f5                      	set_pointer	ZL, ZH, Char_069
000668 dfa6                      	rcall	GFX_set_shape
000669 e028                      	ldi r18,8
00066a e138                      	ldi r19,24
00066b df6b                      	rcall GFX_set_array_pos	
00066c df94                      	rcall	GFX_draw_shape	
                                 ;----------------------------------
00066d e3ee
00066e e0f6                      	set_pointer	ZL, ZH, Char_082
00066f df9f                      	rcall	GFX_set_shape
000670 e120                      	ldi r18,16
000671 e138                      	ldi r19,24
000672 df64                      	rcall GFX_set_array_pos	
000673 df8d                      	rcall	GFX_draw_shape	
                                 ;----------------------------------
000674 edee
000675 e0f5                      	set_pointer	ZL, ZH, Char_070
000676 df98                      	rcall	GFX_set_shape
000677 e128                      	ldi r18,24
000678 e138                      	ldi r19,24
000679 df5d                      	rcall GFX_set_array_pos	
00067a df86                      	rcall	GFX_draw_shape	
                                 ;----------------------------------
00067b ede6
00067c e0f5                      	set_pointer	ZL, ZH, Char_069
00067d df91                      	rcall	GFX_set_shape
00067e e220                      	ldi r18,32
00067f e138                      	ldi r19,24
000680 df56                      	rcall GFX_set_array_pos	
000681 df7f                      	rcall	GFX_draw_shape	
                                 ;----------------------------------
000682 ece6
000683 e0f5                      	set_pointer	ZL, ZH, Char_067
000684 df8a                      	rcall	GFX_set_shape
000685 e228                      	ldi r18,40
000686 e138                      	ldi r19,24
000687 df4f                      	rcall GFX_set_array_pos	
000688 df78                      	rcall	GFX_draw_shape	
                                 	;----------------------------------
000689 e4ee
00068a e0f6                      	set_pointer	ZL, ZH, Char_084
00068b df83                      	rcall	GFX_set_shape
00068c e320                      	ldi r18,48
00068d e138                      	ldi r19,24
00068e df48                      	rcall GFX_set_array_pos	
00068f df71                      	rcall	GFX_draw_shape	
000690 e1a0
000691 e0b2                      	set_pointer	XL, XH, pixel_array
000692 db24                      	rcall	OLED_refresh_screen
000693 da94                      	rcall delay_1s
000694 ca6b                      	rjmp setup
                                 ;---------------------------------
                                 char_loop3:
                                 ;Wear more clothes
000695 e6e6
000696 e0f6                      	set_pointer	ZL, ZH, Char_087
000697 df77                      	rcall	GFX_set_shape
000698 e020                      	ldi r18,0
000699 e330                      	ldi r19,48
00069a df3c                      	rcall GFX_set_array_pos	
00069b df65                      	rcall	GFX_draw_shape	
                                 ;---------------------------------
00069c ede6
00069d e0f5                      	set_pointer	ZL, ZH, Char_069
00069e df70                      	rcall	GFX_set_shape
00069f e028                      	ldi r18,8
0006a0 e330                      	ldi r19,48
0006a1 df35                      	rcall GFX_set_array_pos	
0006a2 df5e                      	rcall	GFX_draw_shape	
                                 ;---------------------------------
0006a3 ebe6
0006a4 e0f5                      	set_pointer	ZL, ZH, Char_065
0006a5 df69                      	rcall	GFX_set_shape
0006a6 e120                      	ldi r18,16
0006a7 e330                      	ldi r19,48
0006a8 df2e                      	rcall GFX_set_array_pos	
0006a9 df57                      	rcall	GFX_draw_shape	
                                 ;---------------------------------
0006aa e3ee
0006ab e0f6                      	set_pointer	ZL, ZH, Char_082
0006ac df62                      	rcall	GFX_set_shape
0006ad e128                      	ldi r18,24
0006ae e330                      	ldi r19,48
0006af df27                      	rcall GFX_set_array_pos	
0006b0 df50                      	rcall	GFX_draw_shape	
                                 ;---------------------------------
0006b1 e1e6
0006b2 e0f6                      	set_pointer	ZL, ZH, Char_077
0006b3 df5b                      	rcall	GFX_set_shape
0006b4 e228                      	ldi r18,40
0006b5 e330                      	ldi r19,48
0006b6 df20                      	rcall GFX_set_array_pos	
0006b7 df49                      	rcall	GFX_draw_shape	
                                 ;---------------------------------
0006b8 e2e6
0006b9 e0f6                      	set_pointer	ZL, ZH, Char_079
0006ba df54                      	rcall	GFX_set_shape
0006bb e320                      	ldi r18,48
0006bc e330                      	ldi r19,48
0006bd df19                      	rcall GFX_set_array_pos	
0006be df42                      	rcall	GFX_draw_shape	
                                 ;---------------------------------
0006bf e3ee
0006c0 e0f6                      	set_pointer	ZL, ZH, Char_082
0006c1 df4d                      	rcall	GFX_set_shape
0006c2 e328                      	ldi r18,56
0006c3 e330                      	ldi r19,48
0006c4 df12                      	rcall GFX_set_array_pos	
0006c5 df3b                      	rcall	GFX_draw_shape	
                                 ;---------------------------------
0006c6 ede6
0006c7 e0f5                      	set_pointer	ZL, ZH, Char_069
0006c8 df46                      	rcall	GFX_set_shape
0006c9 e420                      	ldi r18,64
0006ca e330                      	ldi r19,48
0006cb df0b                      	rcall GFX_set_array_pos	
0006cc df34                      	rcall	GFX_draw_shape	
                                 ;---------------------------------
0006cd ece6
0006ce e0f5                      	set_pointer	ZL, ZH, Char_067
0006cf df3f                      	rcall	GFX_set_shape
0006d0 e520                      	ldi r18,80
0006d1 e330                      	ldi r19,48
0006d2 df04                      	rcall GFX_set_array_pos	
0006d3 df2d                      	rcall	GFX_draw_shape	
                                 ;---------------------------------
0006d4 e0ee
0006d5 e0f6                      	set_pointer	ZL, ZH, Char_076
0006d6 df38                      	rcall	GFX_set_shape
0006d7 e528                      	ldi r18,88
0006d8 e330                      	ldi r19,48
0006d9 defd                      	rcall GFX_set_array_pos	
0006da df26                      	rcall	GFX_draw_shape	
                                 ;---------------------------------
0006db e2e6
0006dc e0f6                      	set_pointer	ZL, ZH, Char_079
0006dd df31                      	rcall	GFX_set_shape
0006de e620                      	ldi r18,96
0006df e330                      	ldi r19,48
0006e0 def6                      	rcall GFX_set_array_pos	
0006e1 df1f                      	rcall	GFX_draw_shape	
                                 ;---------------------------------
0006e2 e4ee
0006e3 e0f6                      	set_pointer	ZL, ZH, Char_084
0006e4 df2a                      	rcall	GFX_set_shape
0006e5 e628                      	ldi r18,104
0006e6 e330                      	ldi r19,48
0006e7 deef                      	rcall GFX_set_array_pos	
0006e8 df18                      	rcall	GFX_draw_shape	
                                 ;---------------------------------
0006e9 eeee
0006ea e0f5                      	set_pointer	ZL, ZH, Char_072
0006eb df23                      	rcall	GFX_set_shape
0006ec e720                      	ldi r18,112
0006ed e330                      	ldi r19,48
0006ee dee8                      	rcall GFX_set_array_pos	
0006ef df11                      	rcall	GFX_draw_shape	
                                 	;---------------------------------
0006f0 ede6
0006f1 e0f5                      	set_pointer	ZL, ZH, Char_069
0006f2 df1c                      	rcall	GFX_set_shape
0006f3 e728                      	ldi r18,120
0006f4 e330                      	ldi r19,48
0006f5 dee1                      	rcall GFX_set_array_pos	
0006f6 df0a                      	rcall	GFX_draw_shape	
                                 	;---------------------------------
0006f7 e4e6
0006f8 e0f6                      		set_pointer	ZL, ZH, Char_083
0006f9 df15                      	rcall	GFX_set_shape
0006fa e020                      	ldi r18,00
0006fb e338                      	ldi r19,56
0006fc deda                      	rcall GFX_set_array_pos	
0006fd df03                      	rcall	GFX_draw_shape	
0006fe e1a0
0006ff e0b2                      	set_pointer	XL, XH, pixel_array
000700 dab6                      	rcall	OLED_refresh_screen
                                 	;---------------------------------
000701 da26                      	rcall delay_1s


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328PB" register use summary:
x  :   4 y  :   2 z  :   2 r0 :   4 r1 :   4 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16:  56 r17:  37 r18:  40 r19:  42 r20:   9 
r21:   8 r22:   0 r23:  16 r24:  16 r25:   8 r26:   8 r27:   8 r28:   2 
r29:   2 r30:  29 r31:  29 
Registers used: 20 out of 35 (57.1%)

"ATmega328PB" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   1 add   :   2 adiw  :   0 and   :   1 
andi  :   1 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   5 brcs  :   0 break :   0 breq  :   5 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   2 brlt  :   0 brmi  :   0 
brne  :  10 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   4 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :  11 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   0 cpc   :   0 
cpi   :  11 cpse  :   0 dec   :  11 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :  12 inc   :   8 jmp   :   0 
ld    :   2 ldd   :   0 ldi   : 158 lds   :   2 lpm   :   2 lsl   :   6 
lsr   :   9 mov   :   4 movw  :   0 mul   :   1 muls  :   0 mulsu :   0 
neg   :   0 nop   :   3 or    :   1 ori   :   0 out   :  11 pop   :  22 
push  :  22 rcall : 115 ret   :  22 reti  :   1 rjmp  :  18 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :   5 sbic  :   0 sbis  :   0 
sbiw  :   0 sbr   :   0 sbrc  :   0 sbrs  :   4 sec   :   0 seh   :   0 
sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   4 std   :   0 sts   :   2 
sub   :   0 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 36 out of 113 (31.9%)

"ATmega328PB" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000e06   1006   2076   3082   32768   9.4%
[.dseg] 0x000100 0x000508      0   1032   1032    2048  50.4%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
